{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar ANIMATION_STATE_EXPLAIN_PROTOCOL = 'ANIMATION_STATE_EXPLAIN_PROTOCOL';\nvar ANIMATION_STATE_LEADER_ELECTION = 'ANIMATION_STATE_LEADER_ELECTION';\nvar ANIMATION_STATE_NODE_DATA = 'ANIMATION_STATE_NODE_DATA';\nvar ANIMATION_STATE_CLIENT_INTRODUCED = 'ANIMATION_STATE_CLIENT_INTRODUCED';\nvar ANIMATION_STATE_CLIENT_QUERIES_DATA = 'ANIMATION_STATE_CLIENT_QUERIES_DATA';\nvar ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nvar ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\nvar SET_VALUE1 = \"V1\";\nvar SET_VALUE2 = \"V2\";\nexport var RaftReadOperationAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RaftReadOperationAnimation, _Component);\n\n  function RaftReadOperationAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, RaftReadOperationAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RaftReadOperationAnimation).call(this, props));\n    _this.animationState = Constants.ANIMATION_STATE_INITIAL;\n    _this.state = {\n      animationFinished: false,\n      previousEnabled: true\n    };\n    return _this;\n  }\n\n  _createClass(RaftReadOperationAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('center-message-text');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case Constants.ANIMATION_STATE_INITIAL:\n          {\n            //////////////////// initial setup ////////////////////\n            // make Node C the Leader\n            // var nodeC = document.getElementById('node-c-circle');\n            // nodeC.classList.add('leader-node');\n            // hide all outer circles (TODO: revisit this approach)\n            var nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\n            for (var i = 0; i < nodeOuterCircles.length; i++) {\n              HelperFunctions.hideElement(nodeOuterCircles[i]);\n            }\n\n            HelperFunctions.showElement(this.mainTextSect);\n            this.changeMainText('Letâ€™s say we have a 3-node raft group.', function () {\n              _this3.animationState = ANIMATION_STATE_EXPLAIN_PROTOCOL;\n            });\n            resolve({\n              animationState: ANIMATION_STATE_EXPLAIN_PROTOCOL,\n              delay: 100\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_EXPLAIN_PROTOCOL:\n          {\n            this.changeMainText('Nodes would have performed leader election..', function () {\n              HelperFunctions.showElement(document.getElementById('node-a-extra-text'));\n              HelperFunctions.showElement(document.getElementById('node-b-extra-text'));\n              HelperFunctions.showElement(document.getElementById('node-c-extra-text'));\n            });\n            this.animationState = ANIMATION_STATE_LEADER_ELECTION;\n            resolve({\n              animationState: ANIMATION_STATE_LEADER_ELECTION,\n              delay: 100\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_LEADER_ELECTION:\n          {\n            HelperFunctions.hideElement(document.getElementById('node-a-extra-text'));\n            HelperFunctions.hideElement(document.getElementById('node-b-extra-text'));\n            HelperFunctions.hideElement(document.getElementById('node-c-extra-text'));\n            this.changeMainText('Node C is current raft leader, denoted by black border.', function () {\n              document.getElementById('node-c-circle').classList.add('leader-node');\n              HelperFunctions.showElement(document.getElementById('node-a-term-text'));\n              HelperFunctions.showElement(document.getElementById('node-b-term-text'));\n              HelperFunctions.showElement(document.getElementById('node-c-term-text'));\n            });\n            this.animationState = ANIMATION_STATE_NODE_DATA;\n            resolve({\n              animationState: ANIMATION_STATE_NODE_DATA,\n              delay: 100\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_NODE_DATA:\n          {\n            this.changeMainText('Assume all nodes have data: <br />(key,value) = (k, V1)', function () {\n              // Just in case, hide the extra text in case user clicked thru too quickly\n              HelperFunctions.hideElement(document.getElementById('node-a-extra-text'));\n              HelperFunctions.hideElement(document.getElementById('node-b-extra-text'));\n              HelperFunctions.hideElement(document.getElementById('node-c-extra-text'));\n              HelperFunctions.showElement(document.getElementById('node-a-text-highlight'));\n              HelperFunctions.showElement(document.getElementById('node-a-value-text-rect'));\n              HelperFunctions.showElement(document.getElementById('node-b-text-highlight'));\n              HelperFunctions.showElement(document.getElementById('node-b-value-text-rect'));\n              HelperFunctions.showElement(document.getElementById('node-c-text-highlight'));\n              HelperFunctions.showElement(document.getElementById('node-c-value-text-rect'));\n            });\n            this.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n            resolve({\n              animationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n              delay: 100\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_INTRODUCED:\n          {\n            //////////////////////////////////////////////////////\n            var introduceClientAnimation = HelperFunctions.introduceClient('');\n            introduceClientAnimation.finished.then(function () {\n              HelperFunctions.hideElement(document.getElementById('node-a-text-highlight'));\n              HelperFunctions.hideElement(document.getElementById('node-b-text-highlight'));\n              HelperFunctions.hideElement(document.getElementById('node-c-text-highlight'));\n              HelperFunctions.showElement(document.getElementById('client-message'));\n              var statusElem = document.getElementById('client-message-status');\n              document.getElementById('client-message-status-text1');\n              var contentLine1 = {\n                index: 0,\n                str: 'SELECT value'\n              };\n              var contentLine2 = {\n                index: 0,\n                str: 'FROM T WHERE key = k'\n              };\n              var statusTextLine1 = document.getElementById('client-message-status-text1');\n              var statusTextLine2 = document.getElementById('client-message-status-text2');\n              HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n              HelperFunctions.showElement(statusElem);\n              anime({\n                targets: contentLine1,\n                index: contentLine1.str.length,\n                easing: 'linear',\n                duration: 600,\n                update: function update() {\n                  statusTextLine1.innerHTML = contentLine1.str.substr(0, contentLine1.index);\n                },\n                complete: function complete() {\n                  anime({\n                    targets: contentLine2,\n                    index: contentLine2.str.length,\n                    easing: 'linear',\n                    duration: 900,\n                    update: function update() {\n                      statusTextLine2.innerHTML = contentLine2.str.substr(0, contentLine2.index);\n                    },\n                    complete: function complete() {\n                      return HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n                    }\n                  });\n                }\n              });\n              _this3.animationState = ANIMATION_STATE_CLIENT_QUERIES_DATA;\n              resolve({\n                animationState: ANIMATION_STATE_CLIENT_QUERIES_DATA,\n                delay: 100\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_QUERIES_DATA:\n          {\n            this.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n            var statusElem = document.getElementById('client-message-status');\n            var content = {\n              index: 0,\n              str: 'Performing read..'\n            };\n            var statusTextLine2 = document.getElementById('client-message-status-text2');\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(statusElem);\n            anime({\n              targets: content,\n              index: content.str.length,\n              easing: 'linear',\n              duration: 640,\n              update: function update() {\n                statusTextLine2.textContent = content.str.substr(0, content.index);\n              },\n              complete: function complete() {\n                return HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n              }\n            });\n            resolve({\n              animationState: this.animationState,\n              delay: 1000\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_PERFORMED_READ_ON_LEADER:\n          {\n            // 'Leader contacts followers to obtain a consensus on current value'\n            HelperFunctions.hideElement(document.getElementById('client-message-status'));\n            HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.logMessageFromLeaderToFollowers(true);\n\n            var _statusElem = document.getElementById('node-c-message-status');\n\n            HelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n            HelperFunctions.showElement(_statusElem);\n            var contentLine1 = {\n              index: 7,\n              str: 'Leader: Contacting followers'\n            };\n            var contentLine2 = {\n              index: 0,\n              str: 'to obtain consensus value.'\n            };\n            var leaderTextLine1 = document.getElementById('node-c-message-status-text1');\n            var leaderTextLine2 = document.getElementById('node-c-message-status-text2');\n            anime({\n              targets: contentLine1,\n              index: contentLine1.str.length,\n              easing: 'linear',\n              duration: 800,\n              update: function update() {\n                leaderTextLine1.textContent = contentLine1.str.substr(0, contentLine1.index);\n              },\n              complete: function complete() {\n                anime({\n                  targets: contentLine2,\n                  index: contentLine2.str.length,\n                  easing: 'linear',\n                  duration: 1040,\n                  update: function update() {\n                    leaderTextLine2.textContent = contentLine2.str.substr(0, contentLine2.index);\n                  }\n                });\n              }\n            });\n            this.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n            resolve({\n              animationState: this.animationState,\n              delay: 1000\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS:\n          {\n            // 'Once majority is obtained. The leader returns value back to the client'\n            document.getElementById('node-c-message-status-text1').textContent = 'Leader:';\n            document.getElementById('node-c-message-status-text2').textContent = '';\n            var leaderText1 = {\n              index: 7,\n              str: 'Leader: Majority obtained.'\n            };\n            var leaderText2 = {\n              index: 0,\n              str: 'Returning value to client..'\n            };\n            var ltxt1 = document.getElementById('node-c-message-status-text1');\n            var ltxt2 = document.getElementById('node-c-message-status-text2');\n            anime({\n              targets: leaderText1,\n              index: leaderText1.str.length,\n              easing: 'linear',\n              duration: 720,\n              update: function update() {\n                ltxt1.textContent = leaderText1.str.substr(0, leaderText1.index);\n              },\n              complete: function complete() {\n                anime({\n                  targets: leaderText2,\n                  index: leaderText2.str.length,\n                  easing: 'linear',\n                  duration: 1080,\n                  update: function update() {\n                    ltxt2.textContent = leaderText2.str.substr(0, leaderText2.index);\n                  },\n                  complete: function complete() {\n                    var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n                    animation.finished.then(function () {\n                      HelperFunctions.setSVGText({\n                        targetId: 'client-node-value',\n                        text: \"Value: \".concat(SET_VALUE1),\n                        showElement: true\n                      });\n                      _this3.animationState = Constants.ANIMATION_STATE_FINISHED;\n\n                      _this3.setState({\n                        animationFinished: true\n                      });\n\n                      resolve({\n                        animationState: _this3.animationState,\n                        delay: 100\n                      });\n                    });\n                  }\n                });\n              }\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          {\n            console.error('Unrecognized state: ' + this.animationState);\n            reject('Unrecognized state: ' + this.animationState);\n          }\n      }\n    }\n  }, {\n    key: \"onPrevious\",\n    value: function onPrevious() {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4.onPreviousInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onPreviousInternal\",\n    value: function onPreviousInternal(resolve, reject) {\n      var _this5 = this;\n\n      switch (this.animationState) {\n        case Constants.ANIMATION_STATE_EXPLAIN_PROTOCOL:\n          {\n            HelperFunctions.showElement(this.mainTextSect);\n            this.changeMainText('Letâ€™s say we have a 3-node raft group.', function () {\n              _this5.animationState = Constants.ANIMATION_STATE_INITIAL;\n            });\n            resolve({\n              animationState: Constants.ANIMATION_STATE_INITIAL,\n              delay: 100\n            });\n          }\n\n        default:\n          {\n            console.error('Unrecognized state or unimplemented: ' + this.animationState);\n            reject('Unrecognized state or unimplemented: ' + this.animationState);\n          }\n      }\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RaftReadOperationAnimation;\n}(Component);\nexport default RaftReadOperationAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js"],"names":["React","Component","anime","MainDiagram","Constants","SSL_OP_EPHEMERAL_RSA","HelperFunctions","require","ANIMATION_STATE_EXPLAIN_PROTOCOL","ANIMATION_STATE_LEADER_ELECTION","ANIMATION_STATE_NODE_DATA","ANIMATION_STATE_CLIENT_INTRODUCED","ANIMATION_STATE_CLIENT_QUERIES_DATA","ANIMATION_STATE_PERFORMED_READ_ON_LEADER","ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS","SET_VALUE1","SET_VALUE2","RaftReadOperationAnimation","props","animationState","ANIMATION_STATE_INITIAL","state","animationFinished","previousEnabled","mainTextSect","document","getElementById","Promise","resolve","reject","onNextInternal","nodeOuterCircles","getElementsByClassName","i","length","hideElement","showElement","changeMainText","delay","classList","add","introduceClientAnimation","introduceClient","finished","then","statusElem","contentLine1","index","str","contentLine2","statusTextLine1","statusTextLine2","targets","easing","duration","update","innerHTML","substr","complete","sendLogMessage","CLIENT_NODE","NODE_C","content","textContent","logMessageFromLeaderToFollowers","leaderTextLine1","leaderTextLine2","leaderText1","leaderText2","ltxt1","ltxt2","animation","setSVGText","targetId","text","ANIMATION_STATE_FINISHED","setState","console","error","onPreviousInternal","onComplete","setTextWithAnimation"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nconst ANIMATION_STATE_EXPLAIN_PROTOCOL = 'ANIMATION_STATE_EXPLAIN_PROTOCOL';\nconst ANIMATION_STATE_LEADER_ELECTION = 'ANIMATION_STATE_LEADER_ELECTION';\nconst ANIMATION_STATE_NODE_DATA = 'ANIMATION_STATE_NODE_DATA';\nconst ANIMATION_STATE_CLIENT_INTRODUCED = 'ANIMATION_STATE_CLIENT_INTRODUCED';\nconst ANIMATION_STATE_CLIENT_QUERIES_DATA = 'ANIMATION_STATE_CLIENT_QUERIES_DATA';\nconst ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nconst ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\n\nconst SET_VALUE1=\"V1\";\nconst SET_VALUE2=\"V2\";\n\nexport class RaftReadOperationAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = Constants.ANIMATION_STATE_INITIAL;\n\t\tthis.state = {\n      animationFinished: false,\n      previousEnabled: true,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('center-message-text');\n\t}\n\n\tpause(){\n\n\t}\n\tresume() {\n\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\n\t\tswitch(this.animationState) {\n\t\t\tcase Constants.ANIMATION_STATE_INITIAL: {\n\t\t\t\t//////////////////// initial setup ////////////////////\n\t\t\t\t// make Node C the Leader\n\t\t\t\t// var nodeC = document.getElementById('node-c-circle');\n\t\t\t\t// nodeC.classList.add('leader-node');\n\n\t\t\t\t// hide all outer circles (TODO: revisit this approach)\n\t\t\t\tlet nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\t\t\t\tfor (let i = 0; i < nodeOuterCircles.length; i++){\n\t\t\t\t\tHelperFunctions.hideElement(nodeOuterCircles[i]);\n\t\t\t\t}\n\n        HelperFunctions.showElement(this.mainTextSect);\n        this.changeMainText('Letâ€™s say we have a 3-node raft group.', () => { this.animationState = ANIMATION_STATE_EXPLAIN_PROTOCOL });\n\n        resolve({\n          animationState: ANIMATION_STATE_EXPLAIN_PROTOCOL,\n          delay: 100,\n        });\n        break;\n      }\n      case ANIMATION_STATE_EXPLAIN_PROTOCOL: {\n\t\t\t\tthis.changeMainText('Nodes would have performed leader election..', () => {\n          HelperFunctions.showElement(document.getElementById('node-a-extra-text'));\n          HelperFunctions.showElement(document.getElementById('node-b-extra-text'));\n          HelperFunctions.showElement(document.getElementById('node-c-extra-text'));\n        })\n        this.animationState = ANIMATION_STATE_LEADER_ELECTION;\n        resolve({\n          animationState: ANIMATION_STATE_LEADER_ELECTION,\n          delay: 100,\n        });\n        break;\n      }\n      case ANIMATION_STATE_LEADER_ELECTION: {\n        HelperFunctions.hideElement(document.getElementById('node-a-extra-text'));\n        HelperFunctions.hideElement(document.getElementById('node-b-extra-text'));\n        HelperFunctions.hideElement(document.getElementById('node-c-extra-text'));\n\t\t\t\tthis.changeMainText('Node C is current raft leader, denoted by black border.', () => {\n          document.getElementById('node-c-circle').classList.add('leader-node');\n          HelperFunctions.showElement(document.getElementById('node-a-term-text'));\n          HelperFunctions.showElement(document.getElementById('node-b-term-text'));\n          HelperFunctions.showElement(document.getElementById('node-c-term-text'));\n        });\n        this.animationState = ANIMATION_STATE_NODE_DATA;\n        resolve({\n          animationState: ANIMATION_STATE_NODE_DATA,\n          delay: 100,\n        });\n        break;\n      }\n      case ANIMATION_STATE_NODE_DATA: {\n\t\t\t\tthis.changeMainText('Assume all nodes have data: <br />(key,value) = (k, V1)', () => {\n          // Just in case, hide the extra text in case user clicked thru too quickly\n          HelperFunctions.hideElement(document.getElementById('node-a-extra-text'));\n          HelperFunctions.hideElement(document.getElementById('node-b-extra-text'));\n          HelperFunctions.hideElement(document.getElementById('node-c-extra-text'));\n\n          HelperFunctions.showElement(document.getElementById('node-a-text-highlight'));\n          HelperFunctions.showElement(document.getElementById('node-a-value-text-rect'));\n          HelperFunctions.showElement(document.getElementById('node-b-text-highlight'));\n          HelperFunctions.showElement(document.getElementById('node-b-value-text-rect'));\n          HelperFunctions.showElement(document.getElementById('node-c-text-highlight'));\n          HelperFunctions.showElement(document.getElementById('node-c-value-text-rect'));\n        });\n        this.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n        resolve({\n          animationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n          delay: 100,\n        });\n        break;\n      }\n      case ANIMATION_STATE_CLIENT_INTRODUCED: {\n\t\t\t\t//////////////////////////////////////////////////////\n\t\t\t\tvar introduceClientAnimation = HelperFunctions.introduceClient('');\n\n\t\t\t\tintroduceClientAnimation.finished.then(() => {\n          HelperFunctions.hideElement(document.getElementById('node-a-text-highlight'));\n          HelperFunctions.hideElement(document.getElementById('node-b-text-highlight'));\n          HelperFunctions.hideElement(document.getElementById('node-c-text-highlight'));\n\n          HelperFunctions.showElement(document.getElementById('client-message'));\n          const statusElem = document.getElementById('client-message-status');\n          document.getElementById('client-message-status-text1');\n          const contentLine1 = {\n            index: 0,\n            str: 'SELECT value'\n          }\n          const contentLine2 = {\n            index: 0,\n            str: 'FROM T WHERE key = k'\n          }\n          const statusTextLine1 = document.getElementById('client-message-status-text1');\n          const statusTextLine2 = document.getElementById('client-message-status-text2');\n          HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n          HelperFunctions.showElement(statusElem);\n          anime({\n            targets: contentLine1,\n            index: contentLine1.str.length,\n            easing: 'linear',\n            duration: 600,\n            update: function() {\n              statusTextLine1.innerHTML = contentLine1.str.substr(0, contentLine1.index);\n            },\n            complete: () => {\n              anime({\n                targets: contentLine2,\n                index: contentLine2.str.length,\n                easing: 'linear',\n                duration: 900,\n                update: function() {\n                  statusTextLine2.innerHTML = contentLine2.str.substr(0, contentLine2.index);\n                },\n                complete: () => HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false)\n              });\n            }\n          });\n\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_CLIENT_QUERIES_DATA;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: ANIMATION_STATE_CLIENT_QUERIES_DATA,\n\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_CLIENT_QUERIES_DATA: {\t\t\t\t\n\t\t\t\tthis.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n\t\t\t\tconst statusElem = document.getElementById('client-message-status');\n\t\t\t\tconst content = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'Performing read..'\n\t\t\t\t}\n\t\t\t\tconst statusTextLine2 = document.getElementById('client-message-status-text2');\n\t\t\t\t\n\t\t\t\tdocument.getElementById('client-message-status-text1').textContent = 'Client: ';\n\t\t\t\tHelperFunctions.showElement(document.getElementById('client-message-bubble'));\n\t\t\t\tHelperFunctions.showElement(statusElem);\n\t\t\t\tanime({\n\t\t\t\t\ttargets: content,\n\t\t\t\t\tindex: content.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 640,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tstatusTextLine2.textContent = content.str.substr(0, content.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false)\n\t\t\t\t});\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 1000\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_PERFORMED_READ_ON_LEADER: {\n\t\t\t\t// 'Leader contacts followers to obtain a consensus on current value'\n\t\t\t\tHelperFunctions.hideElement(document.getElementById('client-message-status'));\n\t\t\t\tHelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n\t\t\t\tHelperFunctions.logMessageFromLeaderToFollowers(true);\n\t\t\t\tconst statusElem = document.getElementById('node-c-message-status');\n\t\t\t\tHelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n\t\t\t\tHelperFunctions.showElement(statusElem);\n\t\t\t\tconst contentLine1 = {\n\t\t\t\t\tindex: 7,\n\t\t\t\t\tstr: 'Leader: Contacting followers'\n\t\t\t\t}\n\t\t\t\tconst contentLine2 = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'to obtain consensus value.'\n\t\t\t\t}\n\t\t\t\tconst leaderTextLine1 = document.getElementById('node-c-message-status-text1');\n\t\t\t\tconst leaderTextLine2 = document.getElementById('node-c-message-status-text2')\n\t\t\t\tanime({\n\t\t\t\t\ttargets: contentLine1,\n\t\t\t\t\tindex: contentLine1.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 800,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tleaderTextLine1.textContent = contentLine1.str.substr(0, contentLine1.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tanime({\n\t\t\t\t\t\t\ttargets: contentLine2,\n\t\t\t\t\t\t\tindex: contentLine2.str.length,\n\t\t\t\t\t\t\teasing: 'linear',\n\t\t\t\t\t\t\tduration: 1040,\n\t\t\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\t\t\tleaderTextLine2.textContent = contentLine2.str.substr(0, contentLine2.index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 1000\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS: {\n\t\t\t\t// 'Once majority is obtained. The leader returns value back to the client'\n\t\t\t\tdocument.getElementById('node-c-message-status-text1').textContent = 'Leader:';\n\t\t\t\tdocument.getElementById('node-c-message-status-text2').textContent = '';\n\t\t\t\tconst leaderText1 = {\n\t\t\t\t\tindex: 7,\n\t\t\t\t\tstr: 'Leader: Majority obtained.'\n\t\t\t\t}\n\t\t\t\tconst leaderText2 = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'Returning value to client..'\n\t\t\t\t}\n\t\t\t\tconst ltxt1 = document.getElementById('node-c-message-status-text1');\n\t\t\t\tconst ltxt2 = document.getElementById('node-c-message-status-text2')\n\t\t\t\tanime({\n\t\t\t\t\ttargets: leaderText1,\n\t\t\t\t\tindex: leaderText1.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 720,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tltxt1.textContent = leaderText1.str.substr(0, leaderText1.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tanime({\n\t\t\t\t\t\t\ttargets: leaderText2,\n\t\t\t\t\t\t\tindex: leaderText2.str.length,\n\t\t\t\t\t\t\teasing: 'linear',\n\t\t\t\t\t\t\tduration: 1080,\n\t\t\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\t\t\tltxt2.textContent = leaderText2.str.substr(0, leaderText2.index);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\t\t\tvar animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\t\t\t\t\t\t\t\tanimation.finished.then(() => {\n\t\t\t\t\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'client-node-value', text: `Value: ${SET_VALUE1}`, showElement: true });\n\n\t\t\t\t\t\t\t\t\tthis.animationState = Constants.ANIMATION_STATE_FINISHED;\n\t\t\t\t\t\t\t\t\tthis.setState({ animationFinished: true });\n\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\t\t\t\tdelay: 100\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t\t\treject('Unrecognized state: ' + this.animationState);\n\t\t\t}\n\t\t}\n  }\n  \n  onPrevious() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onPreviousInternal(resolve,reject);\n\t\t});\n  }\n\n  onPreviousInternal(resolve,reject) {\n\t\tswitch(this.animationState) {\n\t\t\tcase Constants.ANIMATION_STATE_EXPLAIN_PROTOCOL: {\n        HelperFunctions.showElement(this.mainTextSect);\n        this.changeMainText('Letâ€™s say we have a 3-node raft group.', () => { this.animationState = Constants.ANIMATION_STATE_INITIAL });\n\n        resolve({\n          animationState: Constants.ANIMATION_STATE_INITIAL,\n          delay: 100,\n        });\n      }\n      default: {\n        console.error('Unrecognized state or unimplemented: ' + this.animationState);\n        reject('Unrecognized state or unimplemented: ' + this.animationState);\n      }\n    }\n  }\n  \n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RaftReadOperationAnimation;\n"]},"metadata":{},"sourceType":"module"}