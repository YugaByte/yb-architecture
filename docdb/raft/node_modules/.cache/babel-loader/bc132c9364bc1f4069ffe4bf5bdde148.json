{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/ReadFailureAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar ANIMATION_STATE_INITIAL = \"READ_OPERATION_INITIAL\";\nvar ANIMATION_STATE_CLIENT_INTRODUCED = \"ANIMATION_STATE_CLIENT_INTRODUCED\";\nvar ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT\";\nvar ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS\";\nvar ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS = \"ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS\";\nvar ANIMATION_STATE_NODE_C_PARTITIONED = \"ANIMATION_STATE_NODE_C_PARTITIONED\";\nvar ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER = \"ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER\";\nvar ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT\";\nvar ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B\";\nvar ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT\";\nvar ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C = \"ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C\";\nvar SET_VALUE1 = \"V1\";\nvar SET_VALUE2 = \"V2\";\n\nfunction setValueText(value) {\n  return HelperFunctions.getSetValueText(value);\n}\n\nexport var ReadOperationAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReadOperationAnimation, _Component);\n\n  function ReadOperationAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, ReadOperationAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReadOperationAnimation).call(this, props));\n    _this.animationState = ANIMATION_STATE_INITIAL;\n    _this.state = {\n      animationFinished: false\n    };\n    return _this;\n  }\n\n  _createClass(ReadOperationAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('center-message-text');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case ANIMATION_STATE_INITIAL:\n          {\n            //////////////////// initial setup ////////////////////\n            // make Node C the Leader\n            var nodeC = document.getElementById('node-c-circle');\n            nodeC.classList.add('leader-node'); // hide all outer circles (TODO: revisit this approach)\n\n            var nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\n            for (var i = 0; i < nodeOuterCircles.length; i++) {\n              HelperFunctions.hideElement(nodeOuterCircles[i]);\n            } //////////////////////////////////////////////////////\n\n\n            this.changeMainText('Read operation: Why performance suffers...', function () {\n              var introduceClientAnimation = HelperFunctions.introduceClient(\"Value: \".concat(SET_VALUE1));\n              introduceClientAnimation.finished.then(function () {\n                _this3.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_INTRODUCED:\n          {\n            this.changeMainText('Client performs a set operation on leader, which starts a Raft round to replicate data to its followers', function () {\n              // client sends a message to the leader\n              var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false, false, setValueText(SET_VALUE1));\n              animation.finished.then(function () {\n                // leader sends log message to followers and receive an ack from both\n                var animations = HelperFunctions.logMessageFromLeaderToFollowers(true, setValueText(SET_VALUE1));\n                var finishPromises = HelperFunctions.getFinishPromises(animations); // wait for both the animations to complete\n\n                Promise.all(finishPromises).then(function () {\n                  _this3.animationState = ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS; // next leader notifies followers that it has committed the entry\n\n                  var animations = HelperFunctions.logMessageFromLeaderToFollowers(false, setValueText(SET_VALUE1), true, 600);\n                  var finishPromises = HelperFunctions.getFinishPromises(animations); // and notify client as well\n\n                  HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n                  Promise.all(finishPromises).then(function () {\n                    _this3.animationState = ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS;\n                    resolve({\n                      animationState: _this3.animationState,\n                      delay: 100\n                    });\n                  });\n                });\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS:\n          {\n            this.changeMainText('Now imagine the Leader C gets network partitioned from its followers A and B', function () {\n              // Partition Node C from followers\n              HelperFunctions.partitionNodeC();\n              _this3.animationState = ANIMATION_STATE_NODE_C_PARTITIONED;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 100\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_NODE_C_PARTITIONED:\n          {\n            this.changeMainText('This results in A and B electing a new leader, say A', function () {\n              var nodeA = document.getElementById('node-a-circle');\n              nodeA.classList.add('leader-node');\n              HelperFunctions.setSVGText({\n                targetId: 'node-a-term-text',\n                text: \"Term: 2\"\n              });\n              HelperFunctions.setSVGText({\n                targetId: 'node-b-term-text',\n                text: \"Term: 2\"\n              });\n              _this3.animationState = ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 1000\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER:\n          {\n            this.changeMainText('');\n            HelperFunctions.setSVGText({\n              targetId: 'client-node-value',\n              text: \"Value: \".concat(SET_VALUE2)\n            });\n            var statusElem = document.getElementById('client-message-status');\n            var clientContent = {\n              index: 0,\n              str: 'SET k = V2'\n            };\n            var statusText = document.getElementById('client-message-status-text2');\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(statusElem);\n            anime({\n              targets: clientContent,\n              index: clientContent.str.length,\n              easing: 'linear',\n              duration: 400,\n              update: function update() {\n                statusText.textContent = clientContent.str.substr(0, clientContent.index);\n              },\n              complete: function complete() {\n                var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_A, false, false, setValueText(SET_VALUE2));\n                animation.finished.then(function () {\n                  var nodeAToBAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, true, false, setValueText(SET_VALUE2));\n                  nodeAToBAnimation.finished.then(function () {\n                    HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                    HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                    HelperFunctions.showElement(document.getElementById('node-a-message-status'));\n                    HelperFunctions.showElement(document.getElementById('node-a-message-bubble'));\n                    var successfulWrite = {\n                      index: 0,\n                      str: 'Write successful!'\n                    };\n                    document.getElementById('node-a-message-status-text1').textContent = 'Leader: ';\n                    var ltxt1 = document.getElementById('node-a-message-status-text2');\n                    anime({\n                      targets: successfulWrite,\n                      index: successfulWrite.str.length,\n                      easing: 'linear',\n                      duration: 800,\n                      update: function update() {\n                        ltxt1.textContent = successfulWrite.str.substr(0, successfulWrite.index);\n                      },\n                      complete: function complete() {\n                        // send commit confirmation back to B\n                        HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, false, false, setValueText(SET_VALUE2), true, 600); // notify client as well\n\n                        var messageToClientAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.CLIENT_NODE);\n                        messageToClientAnimation.finished.then(function () {\n                          _this3.animationState = ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT;\n                          resolve({\n                            animationState: _this3.animationState,\n                            delay: 1000\n                          });\n                        });\n                      }\n                    });\n                  });\n                });\n              }\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT:\n          {\n            HelperFunctions.hideElement(document.getElementById('node-a-message-status'));\n            HelperFunctions.hideElement(document.getElementById('node-a-message-bubble'));\n\n            var _statusElem = document.getElementById('client-message-status');\n\n            var _clientContent = {\n              index: 0,\n              str: 'Reading from C..'\n            };\n\n            var _statusText = document.getElementById('client-message-status-text2');\n\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(_statusElem);\n            anime({\n              targets: _clientContent,\n              index: _clientContent.str.length,\n              easing: 'linear',\n              duration: 600,\n              update: function update() {\n                _statusText.textContent = _clientContent.str.substr(0, _clientContent.index);\n              },\n              complete: function complete() {\n                var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n                animation.finished.then(function () {\n                  _this3.changeMainText('C thinks it is still the leader and responds with value: ' + SET_VALUE1 + ', which is stale', function () {\n                    var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE, false);\n                    animation.finished.then(function () {\n                      HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                      HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                      HelperFunctions.setSVGText({\n                        targetId: 'client-node-value',\n                        text: \"Value: \".concat(SET_VALUE1),\n                        addCSSClass: 'stale-data-text'\n                      });\n                    });\n                    _this3.animationState = Constants.ANIMATION_STATE_FINISHED;\n\n                    _this3.setState({\n                      animationFinished: true\n                    });\n\n                    resolve({\n                      animationState: _this3.animationState,\n                      delay: 100\n                    });\n                  });\n                });\n              }\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          console.error('Unrecognized state: ' + this.animationState);\n      }\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"main-text-sect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ReadOperationAnimation;\n}(Component);\nexport default ReadOperationAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/ReadFailureAnimation.js"],"names":["React","Component","anime","MainDiagram","Constants","HelperFunctions","require","ANIMATION_STATE_INITIAL","ANIMATION_STATE_CLIENT_INTRODUCED","ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT","ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS","ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS","ANIMATION_STATE_NODE_C_PARTITIONED","ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER","ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT","ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B","ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT","ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C","SET_VALUE1","SET_VALUE2","setValueText","value","getSetValueText","ReadOperationAnimation","props","animationState","state","animationFinished","mainTextSect","document","getElementById","Promise","resolve","reject","onNextInternal","nodeC","classList","add","nodeOuterCircles","getElementsByClassName","i","length","hideElement","changeMainText","introduceClientAnimation","introduceClient","finished","then","delay","animation","sendLogMessage","CLIENT_NODE","NODE_C","animations","logMessageFromLeaderToFollowers","finishPromises","getFinishPromises","all","partitionNodeC","nodeA","setSVGText","targetId","text","statusElem","clientContent","index","str","statusText","textContent","showElement","targets","easing","duration","update","substr","complete","NODE_A","nodeAToBAnimation","NODE_B","successfulWrite","ltxt1","messageToClientAnimation","addCSSClass","ANIMATION_STATE_FINISHED","setState","console","error","onComplete","setTextWithAnimation"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\n\nconst ANIMATION_STATE_INITIAL = \"READ_OPERATION_INITIAL\";\nconst ANIMATION_STATE_CLIENT_INTRODUCED = \"ANIMATION_STATE_CLIENT_INTRODUCED\";\nconst ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT\";\nconst ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS\";\nconst ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS = \"ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS\";\nconst ANIMATION_STATE_NODE_C_PARTITIONED = \"ANIMATION_STATE_NODE_C_PARTITIONED\";\nconst ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER = \"ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER\";\nconst ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT\";\nconst ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B\";\nconst ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT\";\nconst ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C = \"ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C\";\n\nconst SET_VALUE1=\"V1\";\nconst SET_VALUE2=\"V2\";\nfunction setValueText(value) {\n\treturn HelperFunctions.getSetValueText(value);\n}\n\nexport class ReadOperationAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = ANIMATION_STATE_INITIAL;\n\t\tthis.state = {\n\t\t\tanimationFinished: false,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('center-message-text');\n\t}\n\n\tpause() {\n\t}\n\tresume() {\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\t\tswitch(this.animationState) {\n\t\t\tcase ANIMATION_STATE_INITIAL: {\n\t\t\t\t//////////////////// initial setup ////////////////////\n\t\t\t\t// make Node C the Leader\n\t\t\t\tvar nodeC = document.getElementById('node-c-circle');\n\t\t\t\tnodeC.classList.add('leader-node');\n\n\t\t\t\t// hide all outer circles (TODO: revisit this approach)\n\t\t\t\tvar nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\t\t\t\tfor (var i = 0; i < nodeOuterCircles.length; i++) {\n\t\t\t\t\tHelperFunctions.hideElement(nodeOuterCircles[i]);\n\t\t\t\t}\n\t\t\t\t//////////////////////////////////////////////////////\n\t\t\t\tthis.changeMainText('Read operation: Why performance suffers...', () => {\n\t\t\t\t\tvar introduceClientAnimation = HelperFunctions.introduceClient(`Value: ${SET_VALUE1}`);\n\t\t\t\t\tintroduceClientAnimation.finished.then(() => {\n\t\t\t\t\t\tthis.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_CLIENT_INTRODUCED: {\n\t\t\t\tthis.changeMainText('Client performs a set operation on leader, which starts a Raft round to replicate data to its followers',() => {\n\t\t\t\t\t// client sends a message to the leader\n\t\t\t\t\tvar animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false, false, setValueText(SET_VALUE1));\n\n\t\t\t\t\tanimation.finished.then(() => {\n\t\t\t\t\t\t// leader sends log message to followers and receive an ack from both\n\t\t\t\t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(true, setValueText(SET_VALUE1));\n\t\t\t\t\t\tvar finishPromises = HelperFunctions.getFinishPromises(animations);\n\n\t\t\t\t\t\t// wait for both the animations to complete\n\t\t\t\t\t\tPromise.all(finishPromises).then(() => {\n\t\t\t\t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// next leader notifies followers that it has committed the entry\n\t\t\t\t\t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(false,setValueText(SET_VALUE1), true, 600);\n\t\t\t\t\t\t\tvar finishPromises = HelperFunctions.getFinishPromises(animations);\n\n\t\t\t\t\t\t\t// and notify client as well\n\t\t\t\t\t\t\tHelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\n\t\t\t\t\t\t\tPromise.all(finishPromises).then(() => {\n\t\t\t\t\t\t\t\tthis.animationState = ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS;\n\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_ENTRY_COMMITTED_BY_FOLLOWERS: {\n\t\t\t\tthis.changeMainText('Now imagine the Leader C gets network partitioned from its followers A and B', () => {\n\t\t\t\t\t// Partition Node C from followers\n\t\t\t\t\tHelperFunctions.partitionNodeC();\n\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_NODE_C_PARTITIONED;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_NODE_C_PARTITIONED: {\n\t\t\t\tthis.changeMainText('This results in A and B electing a new leader, say A', () => {\n\t\t\t\t\tvar nodeA = document.getElementById('node-a-circle');\n\t\t\t\t\tnodeA.classList.add('leader-node');\n\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'node-a-term-text', text: \"Term: 2\"});\n\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'node-b-term-text', text: \"Term: 2\"});\n\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 1000,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER: {\n        this.changeMainText('');\n        HelperFunctions.setSVGText({targetId: 'client-node-value', text: `Value: ${SET_VALUE2}` });\n\n        const statusElem = document.getElementById('client-message-status');\n        const clientContent = {\n          index: 0,\n          str: 'SET k = V2'\n        }\n        const statusText = document.getElementById('client-message-status-text2');\n        \n        document.getElementById('client-message-status-text1').textContent = 'Client: ';\n        HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n        HelperFunctions.showElement(statusElem);\n        anime({\n          targets: clientContent,\n          index: clientContent.str.length,\n          easing: 'linear',\n          duration: 400,\n          update: function() {\n            statusText.textContent = clientContent.str.substr(0, clientContent.index);\n          },\n          complete: () => {\n            var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_A, false, false, setValueText(SET_VALUE2));\n\n            animation.finished.then(() => {\n              var nodeAToBAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, true, false, setValueText(SET_VALUE2));\n\t\t\t    \t\tnodeAToBAnimation.finished.then(() => {\n                HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                HelperFunctions.showElement(document.getElementById('node-a-message-status'));\n                HelperFunctions.showElement(document.getElementById('node-a-message-bubble'));\n                const successfulWrite = {\n                  index: 0,\n                  str: 'Write successful!'\n                }\n                document.getElementById('node-a-message-status-text1').textContent = 'Leader: ';\n                const ltxt1 = document.getElementById('node-a-message-status-text2');\n\n                anime({\n                  targets: successfulWrite,\n                  index: successfulWrite.str.length,\n                  easing: 'linear',\n                  duration: 800,\n                  update: function() {\n                    ltxt1.textContent = successfulWrite.str.substr(0, successfulWrite.index);\n                  },\n                  complete: () => {\n                    // send commit confirmation back to B\n                    HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, false, false, setValueText(SET_VALUE2), true, 600);\n\n                    // notify client as well\n                    var messageToClientAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.CLIENT_NODE);\n\n                    messageToClientAnimation.finished.then(() => {\n                      this.animationState = ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT;\n                      resolve({\n                        animationState: this.animationState,\n                        delay: 1000,\n                      });\n                    });\n                  }\n                });\n              });\n            });\n          }\n        });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT: {\n        HelperFunctions.hideElement(document.getElementById('node-a-message-status'));\n        HelperFunctions.hideElement(document.getElementById('node-a-message-bubble'));\n\n        const statusElem = document.getElementById('client-message-status');\n        const clientContent = {\n          index: 0,\n          str: 'Reading from C..'\n        }\n        const statusText = document.getElementById('client-message-status-text2');\n        \n        document.getElementById('client-message-status-text1').textContent = 'Client: ';\n        HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n        HelperFunctions.showElement(statusElem);\n        anime({\n          targets: clientContent,\n          index: clientContent.str.length,\n          easing: 'linear',\n          duration: 600,\n          update: function() {\n            statusText.textContent = clientContent.str.substr(0, clientContent.index);\n          },\n          complete: () => {\n            var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n\n            animation.finished.then(() => {\n              this.changeMainText('C thinks it is still the leader and responds with value: ' + SET_VALUE1 + ', which is stale', () => {\n\n                var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE, false);\n                animation.finished.then(() => {\n                  HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                  HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                  HelperFunctions.setSVGText({\n                    targetId:'client-node-value',\n                    text: `Value: ${SET_VALUE1}`,\n                    addCSSClass: 'stale-data-text',\n                  });\n                })\n                this.animationState = Constants.ANIMATION_STATE_FINISHED;\n                this.setState({ animationFinished: true });\n                resolve({\n                  animationState: this.animationState,\n                  delay: 100,\n                });\n              });\n            });\n          }\n        });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t}\n\t}\n\n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"main-text-sect\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ReadOperationAnimation;\n"]},"metadata":{},"sourceType":"module"}