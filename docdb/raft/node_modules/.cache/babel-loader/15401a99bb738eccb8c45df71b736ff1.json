{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar ANIMATION_STATE_INITIAL = 'RAFT_READ_OPERATION_INITIAL';\nvar ANIMATION_STATE_LEADER_ELECTION = 'ANIMATION_STATE_LEADER_ELECTION';\nvar ANIMATION_STATE_CLIENT_INTRODUCED = 'ANIMATION_STATE_CLIENT_INTRODUCED';\nvar ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nvar ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\nvar SET_VALUE1 = \"V1\";\nvar SET_VALUE2 = \"V2\";\nexport var RaftReadOperationAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RaftReadOperationAnimation, _Component);\n\n  function RaftReadOperationAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, RaftReadOperationAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RaftReadOperationAnimation).call(this, props));\n    _this.animationState = ANIMATION_STATE_INITIAL;\n    _this.state = {\n      animationFinished: false\n    };\n    return _this;\n  }\n\n  _createClass(RaftReadOperationAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('main-text-sect');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case ANIMATION_STATE_INITIAL:\n          {\n            //////////////////// initial setup ////////////////////\n            // make Node C the Leader\n            // var nodeC = document.getElementById('node-c-circle');\n            // nodeC.classList.add('leader-node');\n            // hide all outer circles (TODO: revisit this approach)\n            var nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\n            for (var i = 0; i < nodeOuterCircles.length; i++) {\n              HelperFunctions.hideElement(nodeOuterCircles[i]);\n            }\n\n            var centerText1 = document.getElementById('center-message-text1');\n            centerText1.textContent = 'Letâ€™s say we have a 3-node raft group';\n            HelperFunctions.showElement(document.getElementById('center-message-rect'));\n            this.changeMainText(centerText1);\n            this.animationState = ANIMATION_STATE_LEADER_ELECTION;\n            resolve({\n              animationState: ANIMATION_STATE_LEADER_ELECTION,\n              delay: 100\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_LEADER_ELECTION:\n          {\n            var centerText2 = document.getElementById('center-message-text2');\n            centerText2.textContent = 'Nodes would have performed leader election..';\n            this.animationState = ANIMATION_STATE_LEADER_ELECTION;\n            resolve({\n              animationState: ANIMATION_STATE_LEADER_ELECTION,\n              delay: 100\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_INTRODUCED:\n          {\n            //////////////////////////////////////////////////////\n            var introduceClientAnimation = HelperFunctions.introduceClient('');\n            introduceClientAnimation.finished.then(function () {\n              HelperFunctions.showElement(document.getElementById('client-message'));\n              _this3.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n              resolve({\n                animationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n                delay: 100\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_INTRODUCED:\n          {\n            this.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n            var statusElem = document.getElementById('client-message-status');\n            var content = {\n              index: 0,\n              str: 'Performing read..'\n            };\n            var statusTextLine2 = document.getElementById('client-message-status-text2');\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(statusElem);\n            anime({\n              targets: content,\n              index: content.str.length,\n              easing: 'linear',\n              duration: 640,\n              update: function update() {\n                statusTextLine2.textContent = content.str.substr(0, content.index);\n              },\n              complete: function complete() {\n                return HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n              }\n            });\n            resolve({\n              animationState: this.animationState,\n              delay: 1000\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_PERFORMED_READ_ON_LEADER:\n          {\n            // 'Leader contacts followers to obtain a consensus on current value'\n            HelperFunctions.hideElement(document.getElementById('client-message-status'));\n            HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.logMessageFromLeaderToFollowers(true);\n\n            var _statusElem = document.getElementById('node-c-message-status');\n\n            HelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n            HelperFunctions.showElement(_statusElem);\n            var contentLine1 = {\n              index: 7,\n              str: 'Leader: Contacting followers'\n            };\n            var contentLine2 = {\n              index: 0,\n              str: 'to obtain consensus value.'\n            };\n            var leaderTextLine1 = document.getElementById('node-c-message-status-text1');\n            var leaderTextLine2 = document.getElementById('node-c-message-status-text2');\n            anime({\n              targets: contentLine1,\n              index: contentLine1.str.length,\n              easing: 'linear',\n              duration: 800,\n              update: function update() {\n                leaderTextLine1.textContent = contentLine1.str.substr(0, contentLine1.index);\n              },\n              complete: function complete() {\n                anime({\n                  targets: contentLine2,\n                  index: contentLine2.str.length,\n                  easing: 'linear',\n                  duration: 1040,\n                  update: function update() {\n                    leaderTextLine2.textContent = contentLine2.str.substr(0, contentLine2.index);\n                  }\n                });\n              }\n            });\n            this.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n            resolve({\n              animationState: this.animationState,\n              delay: 1000\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS:\n          {\n            // 'Once majority is obtained. The leader returns value back to the client'\n            document.getElementById('node-c-message-status-text1').textContent = 'Leader:';\n            document.getElementById('node-c-message-status-text2').textContent = '';\n            var leaderText1 = {\n              index: 7,\n              str: 'Leader: Majority obtained.'\n            };\n            var leaderText2 = {\n              index: 0,\n              str: 'Returning value to client..'\n            };\n            var ltxt1 = document.getElementById('node-c-message-status-text1');\n            var ltxt2 = document.getElementById('node-c-message-status-text2');\n            anime({\n              targets: leaderText1,\n              index: leaderText1.str.length,\n              easing: 'linear',\n              duration: 720,\n              update: function update() {\n                ltxt1.textContent = leaderText1.str.substr(0, leaderText1.index);\n              },\n              complete: function complete() {\n                anime({\n                  targets: leaderText2,\n                  index: leaderText2.str.length,\n                  easing: 'linear',\n                  duration: 1080,\n                  update: function update() {\n                    ltxt2.textContent = leaderText2.str.substr(0, leaderText2.index);\n                  },\n                  complete: function complete() {\n                    var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n                    animation.finished.then(function () {\n                      HelperFunctions.setSVGText({\n                        targetId: 'client-node-value',\n                        text: \"Value: \".concat(SET_VALUE1),\n                        showElement: true\n                      });\n                      _this3.animationState = Constants.ANIMATION_STATE_FINISHED;\n\n                      _this3.setState({\n                        animationFinished: true\n                      });\n\n                      resolve({\n                        animationState: _this3.animationState,\n                        delay: 100\n                      });\n                    });\n                  }\n                });\n              }\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          {\n            console.error('Unrecognized state: ' + this.animationState);\n            reject('Unrecognized state: ' + this.animationState);\n          }\n      }\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RaftReadOperationAnimation;\n}(Component);\nexport default RaftReadOperationAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js"],"names":["React","Component","anime","MainDiagram","Constants","SSL_OP_EPHEMERAL_RSA","HelperFunctions","require","ANIMATION_STATE_INITIAL","ANIMATION_STATE_LEADER_ELECTION","ANIMATION_STATE_CLIENT_INTRODUCED","ANIMATION_STATE_PERFORMED_READ_ON_LEADER","ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS","SET_VALUE1","SET_VALUE2","RaftReadOperationAnimation","props","animationState","state","animationFinished","mainTextSect","document","getElementById","Promise","resolve","reject","onNextInternal","nodeOuterCircles","getElementsByClassName","i","length","hideElement","centerText1","textContent","showElement","changeMainText","delay","centerText2","introduceClientAnimation","introduceClient","finished","then","statusElem","content","index","str","statusTextLine2","targets","easing","duration","update","substr","complete","sendLogMessage","CLIENT_NODE","NODE_C","logMessageFromLeaderToFollowers","contentLine1","contentLine2","leaderTextLine1","leaderTextLine2","leaderText1","leaderText2","ltxt1","ltxt2","animation","setSVGText","targetId","text","ANIMATION_STATE_FINISHED","setState","console","error","onComplete","setTextWithAnimation"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\nimport { SSL_OP_EPHEMERAL_RSA } from 'constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\n\nconst ANIMATION_STATE_INITIAL = 'RAFT_READ_OPERATION_INITIAL';\nconst ANIMATION_STATE_LEADER_ELECTION = 'ANIMATION_STATE_LEADER_ELECTION'\nconst ANIMATION_STATE_CLIENT_INTRODUCED = 'ANIMATION_STATE_CLIENT_INTRODUCED';\nconst ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nconst ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\n\nconst SET_VALUE1=\"V1\";\nconst SET_VALUE2=\"V2\";\n\nexport class RaftReadOperationAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = ANIMATION_STATE_INITIAL;\n\t\tthis.state = {\n\t\t\tanimationFinished: false,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('main-text-sect');\n\t}\n\n\tpause(){\n\n\t}\n\tresume() {\n\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\n\t\tswitch(this.animationState) {\n\t\t\tcase ANIMATION_STATE_INITIAL: {\n\t\t\t\t//////////////////// initial setup ////////////////////\n\t\t\t\t// make Node C the Leader\n\t\t\t\t// var nodeC = document.getElementById('node-c-circle');\n\t\t\t\t// nodeC.classList.add('leader-node');\n\n\t\t\t\t// hide all outer circles (TODO: revisit this approach)\n\t\t\t\tlet nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\t\t\t\tfor (let i = 0; i < nodeOuterCircles.length; i++){\n\t\t\t\t\tHelperFunctions.hideElement(nodeOuterCircles[i]);\n\t\t\t\t}\n\n\t\t\t\tconst centerText1 = document.getElementById('center-message-text1')\n\t\t\t\tcenterText1.textContent = 'Letâ€™s say we have a 3-node raft group'\n        HelperFunctions.showElement(document.getElementById('center-message-rect'));\n        this.changeMainText(centerText1);\n        \n        this.animationState = ANIMATION_STATE_LEADER_ELECTION;\n        resolve({\n          animationState: ANIMATION_STATE_LEADER_ELECTION,\n          delay: 100,\n        });\n        break;\n      }\n      case ANIMATION_STATE_LEADER_ELECTION: {\n        const centerText2 = document.getElementById('center-message-text2')\n\t\t\t\tcenterText2.textContent = 'Nodes would have performed leader election..'\n        \n        this.animationState = ANIMATION_STATE_LEADER_ELECTION;\n        resolve({\n          animationState: ANIMATION_STATE_LEADER_ELECTION,\n          delay: 100,\n        });\n        break;\n      }\n      case ANIMATION_STATE_CLIENT_INTRODUCED: {\n\t\t\t\t//////////////////////////////////////////////////////\n\t\t\t\tvar introduceClientAnimation = HelperFunctions.introduceClient('');\n\n\t\t\t\tintroduceClientAnimation.finished.then(() => {\t\t\t\t\t\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('client-message'));\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_CLIENT_INTRODUCED: {\t\t\t\t\n\t\t\t\tthis.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n\t\t\t\tconst statusElem = document.getElementById('client-message-status');\n\t\t\t\tconst content = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'Performing read..'\n\t\t\t\t}\n\t\t\t\tconst statusTextLine2 = document.getElementById('client-message-status-text2');\n\t\t\t\t\n\t\t\t\tdocument.getElementById('client-message-status-text1').textContent = 'Client: ';\n\t\t\t\tHelperFunctions.showElement(document.getElementById('client-message-bubble'));\n\t\t\t\tHelperFunctions.showElement(statusElem);\n\t\t\t\tanime({\n\t\t\t\t\ttargets: content,\n\t\t\t\t\tindex: content.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 640,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tstatusTextLine2.textContent = content.str.substr(0, content.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false)\n\t\t\t\t});\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 1000\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_PERFORMED_READ_ON_LEADER: {\n\t\t\t\t// 'Leader contacts followers to obtain a consensus on current value'\n\t\t\t\tHelperFunctions.hideElement(document.getElementById('client-message-status'));\n\t\t\t\tHelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n\t\t\t\tHelperFunctions.logMessageFromLeaderToFollowers(true);\n\t\t\t\tconst statusElem = document.getElementById('node-c-message-status');\n\t\t\t\tHelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n\t\t\t\tHelperFunctions.showElement(statusElem);\n\t\t\t\tconst contentLine1 = {\n\t\t\t\t\tindex: 7,\n\t\t\t\t\tstr: 'Leader: Contacting followers'\n\t\t\t\t}\n\t\t\t\tconst contentLine2 = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'to obtain consensus value.'\n\t\t\t\t}\n\t\t\t\tconst leaderTextLine1 = document.getElementById('node-c-message-status-text1');\n\t\t\t\tconst leaderTextLine2 = document.getElementById('node-c-message-status-text2')\n\t\t\t\tanime({\n\t\t\t\t\ttargets: contentLine1,\n\t\t\t\t\tindex: contentLine1.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 800,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tleaderTextLine1.textContent = contentLine1.str.substr(0, contentLine1.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tanime({\n\t\t\t\t\t\t\ttargets: contentLine2,\n\t\t\t\t\t\t\tindex: contentLine2.str.length,\n\t\t\t\t\t\t\teasing: 'linear',\n\t\t\t\t\t\t\tduration: 1040,\n\t\t\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\t\t\tleaderTextLine2.textContent = contentLine2.str.substr(0, contentLine2.index);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 1000\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS: {\n\t\t\t\t// 'Once majority is obtained. The leader returns value back to the client'\n\t\t\t\tdocument.getElementById('node-c-message-status-text1').textContent = 'Leader:';\n\t\t\t\tdocument.getElementById('node-c-message-status-text2').textContent = '';\n\t\t\t\tconst leaderText1 = {\n\t\t\t\t\tindex: 7,\n\t\t\t\t\tstr: 'Leader: Majority obtained.'\n\t\t\t\t}\n\t\t\t\tconst leaderText2 = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'Returning value to client..'\n\t\t\t\t}\n\t\t\t\tconst ltxt1 = document.getElementById('node-c-message-status-text1');\n\t\t\t\tconst ltxt2 = document.getElementById('node-c-message-status-text2')\n\t\t\t\tanime({\n\t\t\t\t\ttargets: leaderText1,\n\t\t\t\t\tindex: leaderText1.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 720,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tltxt1.textContent = leaderText1.str.substr(0, leaderText1.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tanime({\n\t\t\t\t\t\t\ttargets: leaderText2,\n\t\t\t\t\t\t\tindex: leaderText2.str.length,\n\t\t\t\t\t\t\teasing: 'linear',\n\t\t\t\t\t\t\tduration: 1080,\n\t\t\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\t\t\tltxt2.textContent = leaderText2.str.substr(0, leaderText2.index);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\t\t\tvar animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\t\t\t\t\t\t\t\tanimation.finished.then(() => {\n\t\t\t\t\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'client-node-value', text: `Value: ${SET_VALUE1}`, showElement: true });\n\n\t\t\t\t\t\t\t\t\tthis.animationState = Constants.ANIMATION_STATE_FINISHED;\n\t\t\t\t\t\t\t\t\tthis.setState({ animationFinished: true });\n\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\t\t\t\tdelay: 100\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t\t\treject('Unrecognized state: ' + this.animationState);\n\t\t\t}\n\t\t}\n\t}\n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RaftReadOperationAnimation;\n"]},"metadata":{},"sourceType":"module"}