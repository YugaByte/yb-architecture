{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar ANIMATION_STATE_INITIAL = \"RAFT_READ_OPERATION_INITIAL\";\nvar ANIMATION_STATE_CLIENT_INTRODUCED = \"ANIMATION_STATE_CLIENT_INTRODUCED\";\nvar ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nvar ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\nvar SET_VALUE1 = \"V1\";\nvar SET_VALUE2 = \"V2\";\n\nfunction setValueText(value) {\n  return \"SET \" + value;\n}\n\nexport var RaftReadOperationAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RaftReadOperationAnimation, _Component);\n\n  function RaftReadOperationAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, RaftReadOperationAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RaftReadOperationAnimation).call(this, props));\n    _this.animationState = ANIMATION_STATE_INITIAL;\n    return _this;\n  }\n\n  _createClass(RaftReadOperationAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('main-text-sect');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case ANIMATION_STATE_INITIAL:\n          {\n            //////////////////// initial setup ////////////////////\n            // make Node C the Leader\n            var nodeC = document.getElementById('node-c-circle');\n            nodeC.classList.add('leader-node'); // hide all outer circles (TODO: revisit this approach)\n\n            var nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\n            for (var i = 0; i < nodeOuterCircles.length; i++) {\n              HelperFunctions.hideElement(nodeOuterCircles[i]);\n            }\n\n            var clientMainText = document.getElementById('client-node-main-text'); //////////////////////////////////////////////////////\n\n            this.changeMainText('Performing a read in Raft', function () {\n              var introduceClientAnimation = HelperFunctions.introduceClient(\"Writes \".concat(SET_VALUE1));\n              introduceClientAnimation.finished.then(function () {\n                _this3.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n                resolve({\n                  animationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n                  delay: 100\n                });\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_INTRODUCED:\n          {\n            this.changeMainText('Client performs a read operation', function () {\n              var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n              _this3.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 1000\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_PERFORMED_READ_ON_LEADER:\n          {\n            this.changeMainText('Leader contacts followers to obtain a consensus on current value', function () {\n              var animation = HelperFunctions.logMessageFromLeaderToFollowers(true);\n              _this3.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 1000\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS:\n          {\n            this.changeMainText('Once majority is obtained. The leader returns value back to the client', function () {\n              var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n              animation.finished.then(function () {\n                HelperFunctions.setSVGText({\n                  targetId: 'client-node-main-text',\n                  text: SET_VALUE1,\n                  showElement: true\n                });\n                _this3.animationState = Constants.ANIMATION_STATE_FINISHED;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              });\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            console.log('Animation finished. Nothing to do');\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          {\n            console.error('Unrecognized state: ' + this.animationState);\n            reject('Unrecognized state: ' + this.animationState);\n          }\n      }\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RaftReadOperationAnimation;\n}(Component);\nexport default RaftReadOperationAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js"],"names":["React","Component","anime","MainDiagram","Constants","HelperFunctions","require","ANIMATION_STATE_INITIAL","ANIMATION_STATE_CLIENT_INTRODUCED","ANIMATION_STATE_PERFORMED_READ_ON_LEADER","ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS","SET_VALUE1","SET_VALUE2","setValueText","value","RaftReadOperationAnimation","props","animationState","mainTextSect","document","getElementById","Promise","resolve","reject","onNextInternal","nodeC","classList","add","nodeOuterCircles","getElementsByClassName","i","length","hideElement","clientMainText","changeMainText","introduceClientAnimation","introduceClient","finished","then","delay","animation","sendLogMessage","CLIENT_NODE","NODE_C","logMessageFromLeaderToFollowers","setSVGText","targetId","text","showElement","ANIMATION_STATE_FINISHED","console","log","error","onComplete","setTextWithAnimation"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport {Constants} from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\n\nconst ANIMATION_STATE_INITIAL = \"RAFT_READ_OPERATION_INITIAL\";\nconst ANIMATION_STATE_CLIENT_INTRODUCED = \"ANIMATION_STATE_CLIENT_INTRODUCED\";\nconst ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nconst ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\n\nconst SET_VALUE1=\"V1\";\nconst SET_VALUE2=\"V2\";\nfunction setValueText(value) {\n\treturn \"SET \" + value;\n}\n\nexport class RaftReadOperationAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = ANIMATION_STATE_INITIAL;\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('main-text-sect');\n\t}\n\n\tpause(){\n\n\t}\n\tresume() {\n\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\t\tswitch(this.animationState) {\n\t\t\tcase ANIMATION_STATE_INITIAL: {\n\t\t\t\t//////////////////// initial setup ////////////////////\n\t\t\t\t// make Node C the Leader\n\t\t\t\tvar nodeC = document.getElementById('node-c-circle');\n\t\t\t\tnodeC.classList.add('leader-node');\n\n\t\t\t\t// hide all outer circles (TODO: revisit this approach)\n\t\t\t\tvar nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\t\t\t\tfor (var i = 0; i < nodeOuterCircles.length; i++){\n\t\t\t\t\tHelperFunctions.hideElement(nodeOuterCircles[i]);\n\t\t\t\t}\n\n\t\t\t\tvar clientMainText = document.getElementById('client-node-main-text');\n\n\t\t\t\t//////////////////////////////////////////////////////\n\t\t\t\tthis.changeMainText('Performing a read in Raft', () => {\n\t\t\t\t\tvar introduceClientAnimation = HelperFunctions.introduceClient(`Writes ${SET_VALUE1}`);\n\t\t\t\t\tintroduceClientAnimation.finished.then(() => {\n\t\t\t\t\t\tthis.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n\t\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_CLIENT_INTRODUCED: {\n\t\t\t\tthis.changeMainText('Client performs a read operation', () => {\n\t\t\t\t\tvar animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 1000\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_PERFORMED_READ_ON_LEADER: {\n\t\t\t\tthis.changeMainText('Leader contacts followers to obtain a consensus on current value', () => {\n\t\t\t\t\tvar animation = HelperFunctions.logMessageFromLeaderToFollowers(true);\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 1000\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS: {\n\t\t\t\tthis.changeMainText('Once majority is obtained. The leader returns value back to the client', () => {\n\t\t\t\t\tvar animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\t\t\t\t\tanimation.finished.then(() => {\n\t\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'client-node-main-text', text: SET_VALUE1, showElement: true });\n\n\t\t\t\t\t\tthis.animationState = Constants.ANIMATION_STATE_FINISHED;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 100\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tconsole.log('Animation finished. Nothing to do');\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t\t\treject('Unrecognized state: ' + this.animationState);\n\t\t\t}\n\t\t}\n\t}\n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RaftReadOperationAnimation;\n"]},"metadata":{},"sourceType":"module"}