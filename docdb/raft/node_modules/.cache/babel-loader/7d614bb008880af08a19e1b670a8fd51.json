{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/ReadFailureAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar ANIMATION_STATE_INITIAL = \"READ_OPERATION_INITIAL\";\nvar ANIMATION_STATE_UNSAFE_READ = \"ANIMATION_STATE_UNSAFE_READ\";\nvar ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT\";\nvar ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS\";\nvar ANIMATION_STATE_NETWORK_PARTITIONED = \"ANIMATION_STATE_NETWORK_PARTITIONED\";\nvar ANIMATION_STATE_NODE_C_PARTITIONED = \"ANIMATION_STATE_NODE_C_PARTITIONED\";\nvar ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER = \"ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER\";\nvar ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT\";\nvar ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B\";\nvar ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT\";\nvar ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C = \"ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C\";\nvar SET_VALUE1 = \"V1\";\nvar SET_VALUE2 = \"V2\";\n\nfunction setValueText(value) {\n  return HelperFunctions.getSetValueText(value);\n}\n\nexport var ReadOperationAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReadOperationAnimation, _Component);\n\n  function ReadOperationAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, ReadOperationAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReadOperationAnimation).call(this, props));\n    _this.animationState = ANIMATION_STATE_INITIAL;\n    _this.state = {\n      animationFinished: false\n    };\n    return _this;\n  }\n\n  _createClass(ReadOperationAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('center-message-text');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case ANIMATION_STATE_INITIAL:\n          {\n            //////////////////// initial setup ////////////////////\n            // hide all outer circles (TODO: revisit this approach)\n            var nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\n            for (var i = 0; i < nodeOuterCircles.length; i++) {\n              HelperFunctions.hideElement(nodeOuterCircles[i]);\n            } //////////////////////////////////////////////////////\n\n\n            this.changeMainText('Let\\'s say we have a 3-node raft group.<br />C is the raft leader, all nodes have data <br />k = V1', function () {\n              // make Node C the Leader\n              var nodeC = document.getElementById('node-c-circle');\n              nodeC.classList.add('leader-node');\n              HelperFunctions.showElement(document.getElementById('node-a-term-text'));\n              HelperFunctions.showElement(document.getElementById('node-b-term-text'));\n              HelperFunctions.showElement(document.getElementById('node-c-term-text'));\n              HelperFunctions.showElement(document.getElementById('node-a-value-text-rect'));\n              HelperFunctions.showElement(document.getElementById('node-b-value-text-rect'));\n              HelperFunctions.showElement(document.getElementById('node-c-value-text-rect'));\n              _this3.animationState = ANIMATION_STATE_UNSAFE_READ;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 100\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_UNSAFE_READ:\n          {\n            this.changeMainText('Unsafe to read from raft leader without majority heartbeats. This sequence explains why.', function () {\n              _this3.animationState = ANIMATION_STATE_NETWORK_PARTITIONED;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 100\n              });\n            });\n            break;\n          }\n        // case ANIMATION_STATE_UNSAFE_READ: {\n        // \tthis.changeMainText('Unsafe to read from raft leader without majority heartbeats. This sequence explains why.', () => {\n        // \t\t// client sends a message to the leader\n        // \t\tvar animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false, false, setValueText(SET_VALUE1));\n        // \t\tanimation.finished.then(() => {\n        // \t\t\t// leader sends log message to followers and receive an ack from both\n        // \t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(true, setValueText(SET_VALUE1));\n        // \t\t\tvar finishPromises = HelperFunctions.getFinishPromises(animations);\n        // \t\t\t// wait for both the animations to complete\n        // \t\t\tPromise.all(finishPromises).then(() => {\n        // \t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS;\n        // \t\t\t\t// next leader notifies followers that it has committed the entry\n        // \t\t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(false,setValueText(SET_VALUE1), true, 600);\n        // \t\t\t\tvar finishPromises = HelperFunctions.getFinishPromises(animations);\n        // \t\t\t\t// and notify client as well\n        // \t\t\t\tHelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n        // \t\t\t\tPromise.all(finishPromises).then(() => {\n        // \t\t\t\t\tthis.animationState = ANIMATION_STATE_NETWORK_PARTITIONED;\n        // \t\t\t\t\tresolve({\n        // \t\t\t\t\t\tanimationState: this.animationState,\n        // \t\t\t\t\t\tdelay: 100,\n        // \t\t\t\t\t});\n        // \t\t\t\t});\n        // \t\t\t});\n        // \t\t});\n        // \t});\n        // \tbreak;\n        // }\n\n        case ANIMATION_STATE_NETWORK_PARTITIONED:\n          {\n            this.changeMainText(''); // HelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n            // HelperFunctions.showElement(document.getElementById('node-c-message-status'));\n\n            var altBubbleText = document.getElementById('node-c-message-text-alt');\n            HelperFunctions.showElement(document.getElementById('node-c-message-bubble-alt'));\n            var contentLine1 = {\n              index: 0,\n              str: 'Now imagine raft leader C gets\\n partitioned from follower\\n[but not from client]'\n            };\n            anime({\n              targets: contentLine1,\n              index: contentLine1.str.length,\n              easing: 'linear',\n              duration: 1000,\n              update: function update() {\n                altBubbleText.innerText = contentLine1.str.substr(0, contentLine1.index);\n              },\n              complete: function complete() {\n                HelperFunctions.partitionNodeC();\n                _this3.animationState = ANIMATION_STATE_NODE_C_PARTITIONED;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              }\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_NODE_C_PARTITIONED:\n          {\n            this.changeMainText('This results in A and B electing a new leader, say A', function () {\n              var nodeA = document.getElementById('node-a-circle');\n              nodeA.classList.add('leader-node');\n              HelperFunctions.setSVGText({\n                targetId: 'node-a-term-text',\n                text: \"Term: 2\"\n              });\n              HelperFunctions.setSVGText({\n                targetId: 'node-b-term-text',\n                text: \"Term: 2\"\n              });\n              _this3.animationState = ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 1000\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER:\n          {\n            this.changeMainText('');\n            HelperFunctions.setSVGText({\n              targetId: 'client-node-value',\n              text: \"Value: \".concat(SET_VALUE2)\n            });\n            var statusElem = document.getElementById('client-message-status');\n            var clientContent = {\n              index: 0,\n              str: 'SET k = V2'\n            };\n            var statusText = document.getElementById('client-message-status-text2');\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(statusElem);\n            anime({\n              targets: clientContent,\n              index: clientContent.str.length,\n              easing: 'linear',\n              duration: 400,\n              update: function update() {\n                statusText.textContent = clientContent.str.substr(0, clientContent.index);\n              },\n              complete: function complete() {\n                var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_A, false, false, setValueText(SET_VALUE2));\n                animation.finished.then(function () {\n                  var nodeAToBAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, true, false, setValueText(SET_VALUE2));\n                  nodeAToBAnimation.finished.then(function () {\n                    HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                    HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                    HelperFunctions.showElement(document.getElementById('node-a-message-status'));\n                    HelperFunctions.showElement(document.getElementById('node-a-message-bubble'));\n                    var successfulWrite = {\n                      index: 0,\n                      str: 'Write successful!'\n                    };\n                    document.getElementById('node-a-message-status-text1').textContent = 'Leader: ';\n                    var ltxt1 = document.getElementById('node-a-message-status-text2');\n                    anime({\n                      targets: successfulWrite,\n                      index: successfulWrite.str.length,\n                      easing: 'linear',\n                      duration: 800,\n                      update: function update() {\n                        ltxt1.textContent = successfulWrite.str.substr(0, successfulWrite.index);\n                      },\n                      complete: function complete() {\n                        // send commit confirmation back to B\n                        HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, false, false, setValueText(SET_VALUE2), true, 600); // notify client as well\n\n                        var messageToClientAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.CLIENT_NODE);\n                        messageToClientAnimation.finished.then(function () {\n                          _this3.animationState = ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT;\n                          resolve({\n                            animationState: _this3.animationState,\n                            delay: 1000\n                          });\n                        });\n                      }\n                    });\n                  });\n                });\n              }\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT:\n          {\n            HelperFunctions.hideElement(document.getElementById('node-a-message-status'));\n            HelperFunctions.hideElement(document.getElementById('node-a-message-bubble'));\n\n            var _statusElem = document.getElementById('client-message-status');\n\n            var _clientContent = {\n              index: 0,\n              str: 'Reading from C..'\n            };\n\n            var _statusText = document.getElementById('client-message-status-text2');\n\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(_statusElem);\n            anime({\n              targets: _clientContent,\n              index: _clientContent.str.length,\n              easing: 'linear',\n              duration: 600,\n              update: function update() {\n                _statusText.textContent = _clientContent.str.substr(0, _clientContent.index);\n              },\n              complete: function complete() {\n                var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n                animation.finished.then(function () {\n                  _this3.changeMainText('C thinks it is still the leader and responds with value: ' + SET_VALUE1 + ', which is stale', function () {\n                    var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE, false);\n                    animation.finished.then(function () {\n                      HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                      HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                      HelperFunctions.setSVGText({\n                        targetId: 'client-node-value',\n                        text: \"Value: \".concat(SET_VALUE1),\n                        addCSSClass: 'stale-data-text'\n                      });\n                    });\n                    _this3.animationState = Constants.ANIMATION_STATE_FINISHED;\n\n                    _this3.setState({\n                      animationFinished: true\n                    });\n\n                    resolve({\n                      animationState: _this3.animationState,\n                      delay: 100\n                    });\n                  });\n                });\n              }\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          console.error('Unrecognized state: ' + this.animationState);\n      }\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"main-text-sect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ReadOperationAnimation;\n}(Component);\nexport default ReadOperationAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/ReadFailureAnimation.js"],"names":["React","Component","anime","MainDiagram","Constants","HelperFunctions","require","ANIMATION_STATE_INITIAL","ANIMATION_STATE_UNSAFE_READ","ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT","ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS","ANIMATION_STATE_NETWORK_PARTITIONED","ANIMATION_STATE_NODE_C_PARTITIONED","ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER","ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT","ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B","ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT","ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C","SET_VALUE1","SET_VALUE2","setValueText","value","getSetValueText","ReadOperationAnimation","props","animationState","state","animationFinished","mainTextSect","document","getElementById","Promise","resolve","reject","onNextInternal","nodeOuterCircles","getElementsByClassName","i","length","hideElement","changeMainText","nodeC","classList","add","showElement","delay","altBubbleText","contentLine1","index","str","targets","easing","duration","update","innerText","substr","complete","partitionNodeC","nodeA","setSVGText","targetId","text","statusElem","clientContent","statusText","textContent","animation","sendLogMessage","CLIENT_NODE","NODE_A","finished","then","nodeAToBAnimation","NODE_B","successfulWrite","ltxt1","messageToClientAnimation","NODE_C","addCSSClass","ANIMATION_STATE_FINISHED","setState","console","error","onComplete","setTextWithAnimation"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AAGA,IAAMC,uBAAuB,GAAG,wBAAhC;AACA,IAAMC,2BAA2B,GAAG,6BAApC;AACA,IAAMC,mDAAmD,GAAG,qDAA5D;AACA,IAAMC,mDAAmD,GAAG,qDAA5D;AACA,IAAMC,mCAAmC,GAAG,qCAA5C;AACA,IAAMC,kCAAkC,GAAG,oCAA3C;AACA,IAAMC,wCAAwC,GAAG,0CAAjD;AACA,IAAMC,kEAAkE,GAAG,oEAA3E;AACA,IAAMC,8DAA8D,GAAG,gEAAvE;AACA,IAAMC,4DAA4D,GAAG,8DAArE;AACA,IAAMC,0DAA0D,GAAG,4DAAnE;AAEA,IAAMC,UAAU,GAAC,IAAjB;AACA,IAAMC,UAAU,GAAC,IAAjB;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC5B,SAAOhB,eAAe,CAACiB,eAAhB,CAAgCD,KAAhC,CAAP;AACA;;AAED,WAAaE,sBAAb;AAAA;AAAA;AAAA;;AACC,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,gGAAMA,KAAN;AACA,UAAKC,cAAL,GAAsBlB,uBAAtB;AACA,UAAKmB,KAAL,GAAa;AACZC,MAAAA,iBAAiB,EAAE;AADP,KAAb;AAHkB;AAMlB;;AAPF;AAAA;AAAA,wCASqB;AACnB,WAAKC,YAAL,GAAoBC,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAApB;AACA;AAXF;AAAA;AAAA,4BAaS,CACP;AAdF;AAAA;AAAA,6BAeU,CACR;AAhBF;AAAA;AAAA,6BAkBU;AAAA;;AACR,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtC,QAAA,MAAI,CAACC,cAAL,CAAoBF,OAApB,EAA4BC,MAA5B;AACA,OAFM,CAAP;AAGA;AAtBF;AAAA;AAAA,mCAwBgBD,OAxBhB,EAwBwBC,MAxBxB,EAwBgC;AAAA;;AAC9B,cAAO,KAAKR,cAAZ;AACC,aAAKlB,uBAAL;AAA8B;AAC7B;AAEA;AACA,gBAAI4B,gBAAgB,GAAGN,QAAQ,CAACO,sBAAT,CAAgC,mBAAhC,CAAvB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAAgB,CAACG,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AACjDhC,cAAAA,eAAe,CAACkC,WAAhB,CAA4BJ,gBAAgB,CAACE,CAAD,CAA5C;AACA,aAP4B,CAQ7B;;;AACA,iBAAKG,cAAL,CAAoB,qGAApB,EAA2H,YAAM;AAChI;AACA,kBAAIC,KAAK,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAZ;AACAW,cAAAA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,aAApB;AACAtC,cAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAA5B;AACAzB,cAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAA5B;AACAzB,cAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAA5B;AAEAzB,cAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAA5B;AACAzB,cAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAA5B;AACAzB,cAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,CAA5B;AAEK,cAAA,MAAI,CAACL,cAAL,GAAsBjB,2BAAtB;AACAwB,cAAAA,OAAO,CAAC;AACNP,gBAAAA,cAAc,EAAE,MAAI,CAACA,cADf;AAENoB,gBAAAA,KAAK,EAAE;AAFD,eAAD,CAAP;AAIL,aAjBD;AAkBA;AACA;;AACD,aAAKrC,2BAAL;AAAkC;AACjC,iBAAKgC,cAAL,CAAoB,0FAApB,EAAgH,YAAM;AACrH,cAAA,MAAI,CAACf,cAAL,GAAsBd,mCAAtB;AACAqB,cAAAA,OAAO,CAAC;AACPP,gBAAAA,cAAc,EAAE,MAAI,CAACA,cADd;AAEPoB,gBAAAA,KAAK,EAAE;AAFA,eAAD,CAAP;AAIA,aAND;AAOA;AACA;AACD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,aAAKlC,mCAAL;AAA0C;AACzC,iBAAK6B,cAAL,CAAoB,EAApB,EADyC,CAEzC;AACA;;AACI,gBAAMM,aAAa,GAAGjB,QAAQ,CAACC,cAAT,CAAwB,yBAAxB,CAAtB;AACAzB,YAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,CAA5B;AAEJ,gBAAMiB,YAAY,GAAG;AACpBC,cAAAA,KAAK,EAAE,CADa;AAEpBC,cAAAA,GAAG,EAAE;AAFe,aAArB;AAKI/C,YAAAA,KAAK,CAAC;AACJgD,cAAAA,OAAO,EAAEH,YADL;AAEJC,cAAAA,KAAK,EAAED,YAAY,CAACE,GAAb,CAAiBX,MAFpB;AAGJa,cAAAA,MAAM,EAAE,QAHJ;AAIJC,cAAAA,QAAQ,EAAE,IAJN;AAKJC,cAAAA,MAAM,EAAE,kBAAW;AACjBP,gBAAAA,aAAa,CAACQ,SAAd,GAA0BP,YAAY,CAACE,GAAb,CAAiBM,MAAjB,CAAwB,CAAxB,EAA2BR,YAAY,CAACC,KAAxC,CAA1B;AACD,eAPG;AAQJQ,cAAAA,QAAQ,EAAE,oBAAM;AACdnD,gBAAAA,eAAe,CAACoD,cAAhB;AACA,gBAAA,MAAI,CAAChC,cAAL,GAAsBb,kCAAtB;AACAoB,gBAAAA,OAAO,CAAC;AACNP,kBAAAA,cAAc,EAAE,MAAI,CAACA,cADf;AAENoB,kBAAAA,KAAK,EAAE;AAFD,iBAAD,CAAP;AAID;AAfG,aAAD,CAAL;AAiBJ;AACA;;AACD,aAAKjC,kCAAL;AAAyC;AACxC,iBAAK4B,cAAL,CAAoB,sDAApB,EAA4E,YAAM;AACjF,kBAAIkB,KAAK,GAAG7B,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAZ;AACA4B,cAAAA,KAAK,CAAChB,SAAN,CAAgBC,GAAhB,CAAoB,aAApB;AACAtC,cAAAA,eAAe,CAACsD,UAAhB,CAA2B;AAACC,gBAAAA,QAAQ,EAAE,kBAAX;AAA+BC,gBAAAA,IAAI,EAAE;AAArC,eAA3B;AACAxD,cAAAA,eAAe,CAACsD,UAAhB,CAA2B;AAACC,gBAAAA,QAAQ,EAAE,kBAAX;AAA+BC,gBAAAA,IAAI,EAAE;AAArC,eAA3B;AAEA,cAAA,MAAI,CAACpC,cAAL,GAAsBZ,wCAAtB;AACAmB,cAAAA,OAAO,CAAC;AACPP,gBAAAA,cAAc,EAAE,MAAI,CAACA,cADd;AAEPoB,gBAAAA,KAAK,EAAE;AAFA,eAAD,CAAP;AAIA,aAXD;AAYA;AACA;;AACD,aAAKhC,wCAAL;AAA+C;AAC1C,iBAAK2B,cAAL,CAAoB,EAApB;AACAnC,YAAAA,eAAe,CAACsD,UAAhB,CAA2B;AAACC,cAAAA,QAAQ,EAAE,mBAAX;AAAgCC,cAAAA,IAAI,mBAAY1C,UAAZ;AAApC,aAA3B;AAEA,gBAAM2C,UAAU,GAAGjC,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAAnB;AACA,gBAAMiC,aAAa,GAAG;AACpBf,cAAAA,KAAK,EAAE,CADa;AAEpBC,cAAAA,GAAG,EAAE;AAFe,aAAtB;AAIA,gBAAMe,UAAU,GAAGnC,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,CAAnB;AAEAD,YAAAA,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDmC,WAAvD,GAAqE,UAArE;AACA5D,YAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,YAAAA,eAAe,CAACuC,WAAhB,CAA4BkB,UAA5B;AACA5D,YAAAA,KAAK,CAAC;AACJgD,cAAAA,OAAO,EAAEa,aADL;AAEJf,cAAAA,KAAK,EAAEe,aAAa,CAACd,GAAd,CAAkBX,MAFrB;AAGJa,cAAAA,MAAM,EAAE,QAHJ;AAIJC,cAAAA,QAAQ,EAAE,GAJN;AAKJC,cAAAA,MAAM,EAAE,kBAAW;AACjBW,gBAAAA,UAAU,CAACC,WAAX,GAAyBF,aAAa,CAACd,GAAd,CAAkBM,MAAlB,CAAyB,CAAzB,EAA4BQ,aAAa,CAACf,KAA1C,CAAzB;AACD,eAPG;AAQJQ,cAAAA,QAAQ,EAAE,oBAAM;AACd,oBAAIU,SAAS,GAAG7D,eAAe,CAAC8D,cAAhB,CAA+B/D,SAAS,CAACgE,WAAzC,EAAsDhE,SAAS,CAACiE,MAAhE,EAAwE,KAAxE,EAA+E,KAA/E,EAAsFjD,YAAY,CAACD,UAAD,CAAlG,CAAhB;AAEA+C,gBAAAA,SAAS,CAACI,QAAV,CAAmBC,IAAnB,CAAwB,YAAM;AAC5B,sBAAIC,iBAAiB,GAAGnE,eAAe,CAAC8D,cAAhB,CAA+B/D,SAAS,CAACiE,MAAzC,EAAiDjE,SAAS,CAACqE,MAA3D,EAAmE,IAAnE,EAAyE,KAAzE,EAAgFrD,YAAY,CAACD,UAAD,CAA5F,CAAxB;AACLqD,kBAAAA,iBAAiB,CAACF,QAAlB,CAA2BC,IAA3B,CAAgC,YAAM;AAC/BlE,oBAAAA,eAAe,CAACkC,WAAhB,CAA4BV,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,oBAAAA,eAAe,CAACkC,WAAhB,CAA4BV,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,oBAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,oBAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACA,wBAAM4C,eAAe,GAAG;AACtB1B,sBAAAA,KAAK,EAAE,CADe;AAEtBC,sBAAAA,GAAG,EAAE;AAFiB,qBAAxB;AAIApB,oBAAAA,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDmC,WAAvD,GAAqE,UAArE;AACA,wBAAMU,KAAK,GAAG9C,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,CAAd;AAEA5B,oBAAAA,KAAK,CAAC;AACJgD,sBAAAA,OAAO,EAAEwB,eADL;AAEJ1B,sBAAAA,KAAK,EAAE0B,eAAe,CAACzB,GAAhB,CAAoBX,MAFvB;AAGJa,sBAAAA,MAAM,EAAE,QAHJ;AAIJC,sBAAAA,QAAQ,EAAE,GAJN;AAKJC,sBAAAA,MAAM,EAAE,kBAAW;AACjBsB,wBAAAA,KAAK,CAACV,WAAN,GAAoBS,eAAe,CAACzB,GAAhB,CAAoBM,MAApB,CAA2B,CAA3B,EAA8BmB,eAAe,CAAC1B,KAA9C,CAApB;AACD,uBAPG;AAQJQ,sBAAAA,QAAQ,EAAE,oBAAM;AACd;AACAnD,wBAAAA,eAAe,CAAC8D,cAAhB,CAA+B/D,SAAS,CAACiE,MAAzC,EAAiDjE,SAAS,CAACqE,MAA3D,EAAmE,KAAnE,EAA0E,KAA1E,EAAiFrD,YAAY,CAACD,UAAD,CAA7F,EAA2G,IAA3G,EAAiH,GAAjH,EAFc,CAId;;AACA,4BAAIyD,wBAAwB,GAAGvE,eAAe,CAAC8D,cAAhB,CAA+B/D,SAAS,CAACiE,MAAzC,EAAiDjE,SAAS,CAACgE,WAA3D,CAA/B;AAEAQ,wBAAAA,wBAAwB,CAACN,QAAzB,CAAkCC,IAAlC,CAAuC,YAAM;AAC3C,0BAAA,MAAI,CAAC9C,cAAL,GAAsBT,4DAAtB;AACAgB,0BAAAA,OAAO,CAAC;AACNP,4BAAAA,cAAc,EAAE,MAAI,CAACA,cADf;AAENoB,4BAAAA,KAAK,EAAE;AAFD,2BAAD,CAAP;AAID,yBAND;AAOD;AAtBG,qBAAD,CAAL;AAwBD,mBApCN;AAqCI,iBAvCD;AAwCD;AAnDG,aAAD,CAAL;AAqDJ;AACA;;AACD,aAAK7B,4DAAL;AAAmE;AAC9DX,YAAAA,eAAe,CAACkC,WAAhB,CAA4BV,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,YAAAA,eAAe,CAACkC,WAAhB,CAA4BV,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;;AAEA,gBAAMgC,WAAU,GAAGjC,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAAnB;;AACA,gBAAMiC,cAAa,GAAG;AACpBf,cAAAA,KAAK,EAAE,CADa;AAEpBC,cAAAA,GAAG,EAAE;AAFe,aAAtB;;AAIA,gBAAMe,WAAU,GAAGnC,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,CAAnB;;AAEAD,YAAAA,QAAQ,CAACC,cAAT,CAAwB,6BAAxB,EAAuDmC,WAAvD,GAAqE,UAArE;AACA5D,YAAAA,eAAe,CAACuC,WAAhB,CAA4Bf,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,YAAAA,eAAe,CAACuC,WAAhB,CAA4BkB,WAA5B;AACA5D,YAAAA,KAAK,CAAC;AACJgD,cAAAA,OAAO,EAAEa,cADL;AAEJf,cAAAA,KAAK,EAAEe,cAAa,CAACd,GAAd,CAAkBX,MAFrB;AAGJa,cAAAA,MAAM,EAAE,QAHJ;AAIJC,cAAAA,QAAQ,EAAE,GAJN;AAKJC,cAAAA,MAAM,EAAE,kBAAW;AACjBW,gBAAAA,WAAU,CAACC,WAAX,GAAyBF,cAAa,CAACd,GAAd,CAAkBM,MAAlB,CAAyB,CAAzB,EAA4BQ,cAAa,CAACf,KAA1C,CAAzB;AACD,eAPG;AAQJQ,cAAAA,QAAQ,EAAE,oBAAM;AACd,oBAAIU,SAAS,GAAG7D,eAAe,CAAC8D,cAAhB,CAA+B/D,SAAS,CAACgE,WAAzC,EAAsDhE,SAAS,CAACyE,MAAhE,EAAwE,KAAxE,CAAhB;AAEAX,gBAAAA,SAAS,CAACI,QAAV,CAAmBC,IAAnB,CAAwB,YAAM;AAC5B,kBAAA,MAAI,CAAC/B,cAAL,CAAoB,8DAA8DtB,UAA9D,GAA2E,kBAA/F,EAAmH,YAAM;AAEvH,wBAAIgD,SAAS,GAAG7D,eAAe,CAAC8D,cAAhB,CAA+B/D,SAAS,CAACyE,MAAzC,EAAiDzE,SAAS,CAACgE,WAA3D,EAAwE,KAAxE,CAAhB;AACAF,oBAAAA,SAAS,CAACI,QAAV,CAAmBC,IAAnB,CAAwB,YAAM;AAC5BlE,sBAAAA,eAAe,CAACkC,WAAhB,CAA4BV,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,sBAAAA,eAAe,CAACkC,WAAhB,CAA4BV,QAAQ,CAACC,cAAT,CAAwB,uBAAxB,CAA5B;AACAzB,sBAAAA,eAAe,CAACsD,UAAhB,CAA2B;AACzBC,wBAAAA,QAAQ,EAAC,mBADgB;AAEzBC,wBAAAA,IAAI,mBAAY3C,UAAZ,CAFqB;AAGzB4D,wBAAAA,WAAW,EAAE;AAHY,uBAA3B;AAKD,qBARD;AASA,oBAAA,MAAI,CAACrD,cAAL,GAAsBrB,SAAS,CAAC2E,wBAAhC;;AACA,oBAAA,MAAI,CAACC,QAAL,CAAc;AAAErD,sBAAAA,iBAAiB,EAAE;AAArB,qBAAd;;AACAK,oBAAAA,OAAO,CAAC;AACNP,sBAAAA,cAAc,EAAE,MAAI,CAACA,cADf;AAENoB,sBAAAA,KAAK,EAAE;AAFD,qBAAD,CAAP;AAID,mBAlBD;AAmBD,iBApBD;AAqBD;AAhCG,aAAD,CAAL;AAkCJ;AACA;;AACD,aAAKzC,SAAS,CAAC2E,wBAAf;AAAyC;AACxC/C,YAAAA,OAAO,CAAC;AACPP,cAAAA,cAAc,EAAE,KAAKA,cADd;AAEPoB,cAAAA,KAAK,EAAE;AAFA,aAAD,CAAP;AAIA;AACA;;AACD;AACCoC,UAAAA,OAAO,CAACC,KAAR,CAAc,yBAAyB,KAAKzD,cAA5C;AAtPF;AAwPA;AAjRF;AAAA;AAAA,mCAmRgBoC,IAnRhB,EAmRsBsB,UAnRtB,EAmRkC;AAChC9E,MAAAA,eAAe,CAAC+E,oBAAhB,CAAqC,KAAKxD,YAA1C,EAAwDiC,IAAxD,EAA8DsB,UAA9D;AACA;AArRF;AAAA;AAAA,6BAuRU;AACR,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADD,EAIC;AAAK,QAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,CADD;AASA;AAjSF;;AAAA;AAAA,EAA4ClF,SAA5C;AAoSA,eAAesB,sBAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\n\nconst ANIMATION_STATE_INITIAL = \"READ_OPERATION_INITIAL\";\nconst ANIMATION_STATE_UNSAFE_READ = \"ANIMATION_STATE_UNSAFE_READ\";\nconst ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_LEADER_RECEIVED_MESSAGE_FROM_CLIENT\";\nconst ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS\";\nconst ANIMATION_STATE_NETWORK_PARTITIONED = \"ANIMATION_STATE_NETWORK_PARTITIONED\";\nconst ANIMATION_STATE_NODE_C_PARTITIONED = \"ANIMATION_STATE_NODE_C_PARTITIONED\";\nconst ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER = \"ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER\";\nconst ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_MESSAGE_FROM_CLIENT\";\nconst ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B = \"ANIMATION_STATE_POST_PARTITION_NODE_A_RECEIVED_ACK_FROM_NODE_B\";\nconst ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT = \"ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT\";\nconst ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C = \"ANIMATION_STATE_POST_PARTITION_CLIENT_HAS_READ_FROM_NODE_C\";\n\nconst SET_VALUE1=\"V1\";\nconst SET_VALUE2=\"V2\";\nfunction setValueText(value) {\n\treturn HelperFunctions.getSetValueText(value);\n}\n\nexport class ReadOperationAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = ANIMATION_STATE_INITIAL;\n\t\tthis.state = {\n\t\t\tanimationFinished: false,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('center-message-text');\n\t}\n\n\tpause() {\n\t}\n\tresume() {\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\t\tswitch(this.animationState) {\n\t\t\tcase ANIMATION_STATE_INITIAL: {\n\t\t\t\t//////////////////// initial setup ////////////////////\n\n\t\t\t\t// hide all outer circles (TODO: revisit this approach)\n\t\t\t\tvar nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\t\t\t\tfor (var i = 0; i < nodeOuterCircles.length; i++) {\n\t\t\t\t\tHelperFunctions.hideElement(nodeOuterCircles[i]);\n\t\t\t\t}\n\t\t\t\t//////////////////////////////////////////////////////\n\t\t\t\tthis.changeMainText('Let\\'s say we have a 3-node raft group.<br />C is the raft leader, all nodes have data <br />k = V1', () => {\n\t\t\t\t\t// make Node C the Leader\n\t\t\t\t\tvar nodeC = document.getElementById('node-c-circle');\n\t\t\t\t\tnodeC.classList.add('leader-node');\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('node-a-term-text'));\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('node-b-term-text'));\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('node-c-term-text'));\n\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('node-a-value-text-rect'));\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('node-b-value-text-rect'));\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('node-c-value-text-rect'));\n\t\t\t\t\n          this.animationState = ANIMATION_STATE_UNSAFE_READ;\n          resolve({\n            animationState: this.animationState,\n            delay: 100,\n          });\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_UNSAFE_READ: {\n\t\t\t\tthis.changeMainText('Unsafe to read from raft leader without majority heartbeats. This sequence explains why.', () => {\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_NETWORK_PARTITIONED;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// case ANIMATION_STATE_UNSAFE_READ: {\n\t\t\t// \tthis.changeMainText('Unsafe to read from raft leader without majority heartbeats. This sequence explains why.', () => {\n\t\t\t// \t\t// client sends a message to the leader\n\t\t\t// \t\tvar animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false, false, setValueText(SET_VALUE1));\n\n\t\t\t// \t\tanimation.finished.then(() => {\n\t\t\t// \t\t\t// leader sends log message to followers and receive an ack from both\n\t\t\t// \t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(true, setValueText(SET_VALUE1));\n\t\t\t// \t\t\tvar finishPromises = HelperFunctions.getFinishPromises(animations);\n\n\t\t\t// \t\t\t// wait for both the animations to complete\n\t\t\t// \t\t\tPromise.all(finishPromises).then(() => {\n\t\t\t// \t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_ACKS_FROM_FOLLOWERS;\n\t\t\t\t\t\t\t\n\t\t\t// \t\t\t\t// next leader notifies followers that it has committed the entry\n\t\t\t// \t\t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(false,setValueText(SET_VALUE1), true, 600);\n\t\t\t// \t\t\t\tvar finishPromises = HelperFunctions.getFinishPromises(animations);\n\n\t\t\t// \t\t\t\t// and notify client as well\n\t\t\t// \t\t\t\tHelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\n\t\t\t// \t\t\t\tPromise.all(finishPromises).then(() => {\n\t\t\t// \t\t\t\t\tthis.animationState = ANIMATION_STATE_NETWORK_PARTITIONED;\n\t\t\t// \t\t\t\t\tresolve({\n\t\t\t// \t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t// \t\t\t\t\t\tdelay: 100,\n\t\t\t// \t\t\t\t\t});\n\t\t\t// \t\t\t\t});\n\t\t\t// \t\t\t});\n\t\t\t// \t\t});\n\t\t\t// \t});\n\t\t\t// \tbreak;\n\t\t\t// }\n\t\t\tcase ANIMATION_STATE_NETWORK_PARTITIONED: {\n\t\t\t\tthis.changeMainText('');\n\t\t\t\t// HelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n\t\t\t\t// HelperFunctions.showElement(document.getElementById('node-c-message-status'));\n        const altBubbleText = document.getElementById('node-c-message-text-alt');\n        HelperFunctions.showElement(document.getElementById('node-c-message-bubble-alt'));\n\n\t\t\t\tconst contentLine1 = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'Now imagine raft leader C gets\\n partitioned from follower\\n[but not from client]'\n        };\n\n        anime({\n          targets: contentLine1,\n          index: contentLine1.str.length,\n          easing: 'linear',\n          duration: 1000,\n          update: function() {\n            altBubbleText.innerText = contentLine1.str.substr(0, contentLine1.index);\n          },\n          complete: () => {\n            HelperFunctions.partitionNodeC()\n            this.animationState = ANIMATION_STATE_NODE_C_PARTITIONED;\n            resolve({\n              animationState: this.animationState,\n              delay: 100,\n            });\n          }\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_NODE_C_PARTITIONED: {\n\t\t\t\tthis.changeMainText('This results in A and B electing a new leader, say A', () => {\n\t\t\t\t\tvar nodeA = document.getElementById('node-a-circle');\n\t\t\t\t\tnodeA.classList.add('leader-node');\n\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'node-a-term-text', text: \"Term: 2\"});\n\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'node-b-term-text', text: \"Term: 2\"});\n\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 1000,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_NODE_A_ELECTED_AS_LEADER: {\n        this.changeMainText('');\n        HelperFunctions.setSVGText({targetId: 'client-node-value', text: `Value: ${SET_VALUE2}` });\n\n        const statusElem = document.getElementById('client-message-status');\n        const clientContent = {\n          index: 0,\n          str: 'SET k = V2'\n        }\n        const statusText = document.getElementById('client-message-status-text2');\n        \n        document.getElementById('client-message-status-text1').textContent = 'Client: ';\n        HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n        HelperFunctions.showElement(statusElem);\n        anime({\n          targets: clientContent,\n          index: clientContent.str.length,\n          easing: 'linear',\n          duration: 400,\n          update: function() {\n            statusText.textContent = clientContent.str.substr(0, clientContent.index);\n          },\n          complete: () => {\n            var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_A, false, false, setValueText(SET_VALUE2));\n\n            animation.finished.then(() => {\n              var nodeAToBAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, true, false, setValueText(SET_VALUE2));\n\t\t\t    \t\tnodeAToBAnimation.finished.then(() => {\n                HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                HelperFunctions.showElement(document.getElementById('node-a-message-status'));\n                HelperFunctions.showElement(document.getElementById('node-a-message-bubble'));\n                const successfulWrite = {\n                  index: 0,\n                  str: 'Write successful!'\n                }\n                document.getElementById('node-a-message-status-text1').textContent = 'Leader: ';\n                const ltxt1 = document.getElementById('node-a-message-status-text2');\n\n                anime({\n                  targets: successfulWrite,\n                  index: successfulWrite.str.length,\n                  easing: 'linear',\n                  duration: 800,\n                  update: function() {\n                    ltxt1.textContent = successfulWrite.str.substr(0, successfulWrite.index);\n                  },\n                  complete: () => {\n                    // send commit confirmation back to B\n                    HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.NODE_B, false, false, setValueText(SET_VALUE2), true, 600);\n\n                    // notify client as well\n                    var messageToClientAnimation = HelperFunctions.sendLogMessage(Constants.NODE_A, Constants.CLIENT_NODE);\n\n                    messageToClientAnimation.finished.then(() => {\n                      this.animationState = ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT;\n                      resolve({\n                        animationState: this.animationState,\n                        delay: 1000,\n                      });\n                    });\n                  }\n                });\n              });\n            });\n          }\n        });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_POST_PARTITION_NODE_A_HAS_SENT_ACK_TO_CLIENT: {\n        HelperFunctions.hideElement(document.getElementById('node-a-message-status'));\n        HelperFunctions.hideElement(document.getElementById('node-a-message-bubble'));\n\n        const statusElem = document.getElementById('client-message-status');\n        const clientContent = {\n          index: 0,\n          str: 'Reading from C..'\n        }\n        const statusText = document.getElementById('client-message-status-text2');\n        \n        document.getElementById('client-message-status-text1').textContent = 'Client: ';\n        HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n        HelperFunctions.showElement(statusElem);\n        anime({\n          targets: clientContent,\n          index: clientContent.str.length,\n          easing: 'linear',\n          duration: 600,\n          update: function() {\n            statusText.textContent = clientContent.str.substr(0, clientContent.index);\n          },\n          complete: () => {\n            var animation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n\n            animation.finished.then(() => {\n              this.changeMainText('C thinks it is still the leader and responds with value: ' + SET_VALUE1 + ', which is stale', () => {\n\n                var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE, false);\n                animation.finished.then(() => {\n                  HelperFunctions.hideElement(document.getElementById('client-message-status'));\n                  HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n                  HelperFunctions.setSVGText({\n                    targetId:'client-node-value',\n                    text: `Value: ${SET_VALUE1}`,\n                    addCSSClass: 'stale-data-text',\n                  });\n                })\n                this.animationState = Constants.ANIMATION_STATE_FINISHED;\n                this.setState({ animationFinished: true });\n                resolve({\n                  animationState: this.animationState,\n                  delay: 100,\n                });\n              });\n            });\n          }\n        });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t}\n\t}\n\n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"main-text-sect\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ReadOperationAnimation;\n"]},"metadata":{},"sourceType":"module"}