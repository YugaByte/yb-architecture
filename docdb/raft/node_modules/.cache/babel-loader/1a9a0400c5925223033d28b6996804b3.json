{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram, { clientNodePositions } from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar ANIMATION_STATE_INITIAL = \"RAFT_READ_OPERATION_INITIAL\";\nvar ANIMATION_STATE_CLIENT_INTRODUCED = \"ANIMATION_STATE_CLIENT_INTRODUCED\";\nvar ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nvar ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\nvar SET_VALUE1 = \"V1\";\nvar SET_VALUE2 = \"V2\";\n\nfunction setValueText(value) {\n  return \"SET \" + value;\n}\n\nexport var RaftReadOperationAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RaftReadOperationAnimation, _Component);\n\n  function RaftReadOperationAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, RaftReadOperationAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RaftReadOperationAnimation).call(this, props));\n    _this.animationState = ANIMATION_STATE_INITIAL;\n    _this.state = {\n      animationFinished: false\n    };\n    return _this;\n  }\n\n  _createClass(RaftReadOperationAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('main-text-sect');\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case ANIMATION_STATE_INITIAL:\n          {\n            //////////////////// initial setup ////////////////////\n            // make Node C the Leader\n            var nodeC = document.getElementById('node-c-circle');\n            nodeC.classList.add('leader-node'); // hide all outer circles (TODO: revisit this approach)\n\n            var nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\n            for (var i = 0; i < nodeOuterCircles.length; i++) {\n              HelperFunctions.hideElement(nodeOuterCircles[i]);\n            } //////////////////////////////////////////////////////\n\n\n            var introduceClientAnimation = HelperFunctions.introduceClient('');\n            introduceClientAnimation.finished.then(function () {\n              HelperFunctions.showElement(document.getElementById('client-message'));\n              _this3.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n              resolve({\n                animationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n                delay: 100\n              });\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_CLIENT_INTRODUCED:\n          {\n            this.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n            var statusElem = document.getElementById('client-message-status');\n            var _testing = {\n              index: 0,\n              str: 'Performing read..'\n            };\n\n            var _statusText = document.getElementById('client-message-status-text2');\n\n            document.getElementById('client-message-status-text1').textContent = 'Client: ';\n            HelperFunctions.showElement(document.getElementById('client-message-bubble'));\n            HelperFunctions.showElement(statusElem);\n            anime({\n              targets: _testing,\n              index: _testing.str.length,\n              easing: 'linear',\n              duration: 750,\n              update: function update() {\n                _statusText.textContent = _testing.str.substr(0, _testing.index);\n              },\n              complete: function complete() {\n                return HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n              }\n            });\n            resolve({\n              animationState: this.animationState,\n              delay: 1000\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_PERFORMED_READ_ON_LEADER:\n          {\n            // 'Leader contacts followers to obtain a consensus on current value'\n            HelperFunctions.hideElement(document.getElementById('client-message-status'));\n            HelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n            var animation = HelperFunctions.logMessageFromLeaderToFollowers(true);\n\n            var _statusElem = document.getElementById('node-c-message-status');\n\n            document.getElementById('node-c-message-status-text1').textContent = 'Leader: Contacting followers';\n            document.getElementById('node-c-message-status-text2').textContent = 'to obtain consensus value.';\n            HelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n            HelperFunctions.showElement(_statusElem);\n            var leaderText1 = {\n              index: 7,\n              str: 'Leader: Contacting followers'\n            };\n            var leaderText2 = {\n              index: 0,\n              str: 'to obtain consensus value.'\n            };\n            var ltxt1 = document.getElementById('node-c-message-status-text1');\n            var ltxt2 = document.getElementById('node-c-message-status-text2');\n            anime({\n              targets: leaderText1,\n              index: leaderText1.str.length,\n              easing: 'linear',\n              duration: 750,\n              update: function update() {\n                ltxt1.textContent = leaderText1.str.substr(0, leaderText1.index);\n              },\n              complete: function complete() {\n                anime({\n                  targets: leaderText2,\n                  index: leaderText2.str.length,\n                  easing: 'linear',\n                  duration: 750,\n                  update: function update() {\n                    ltxt2.textContent = leaderText2.str.substr(0, leaderText2.index);\n                  },\n                  complete: function complete() {}\n                });\n              }\n            });\n            anime({\n              targets: testing,\n              index: testing.str.length,\n              easing: 'linear',\n              duration: 750,\n              update: function update() {\n                statusText.textContent = testing.str.substr(0, testing.index);\n              },\n              complete: function complete() {\n                return HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false);\n              }\n            });\n            this.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n            resolve({\n              animationState: this.animationState,\n              delay: 1000\n            });\n            break;\n          }\n\n        case ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS:\n          {\n            this.changeMainText('Once majority is obtained. The leader returns value back to the client', function () {\n              document.getElementById('node-c-message-status-text1').textContent = 'Leader: Majority obtained.';\n              document.getElementById('node-c-message-status-text2').textContent = 'Returning value to client..';\n              var animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n              animation.finished.then(function () {\n                HelperFunctions.setSVGText({\n                  targetId: 'client-node-main-text',\n                  text: SET_VALUE1,\n                  showElement: true\n                });\n                _this3.animationState = Constants.ANIMATION_STATE_FINISHED;\n\n                _this3.setState({\n                  animationFinished: true\n                });\n\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              });\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          {\n            console.error('Unrecognized state: ' + this.animationState);\n            reject('Unrecognized state: ' + this.animationState);\n          }\n      }\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return RaftReadOperationAnimation;\n}(Component);\nexport default RaftReadOperationAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/RaftReadOperationAnimation.js"],"names":["React","Component","anime","MainDiagram","clientNodePositions","Constants","HelperFunctions","require","ANIMATION_STATE_INITIAL","ANIMATION_STATE_CLIENT_INTRODUCED","ANIMATION_STATE_PERFORMED_READ_ON_LEADER","ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS","SET_VALUE1","SET_VALUE2","setValueText","value","RaftReadOperationAnimation","props","animationState","state","animationFinished","mainTextSect","document","getElementById","Promise","resolve","reject","onNextInternal","nodeC","classList","add","nodeOuterCircles","getElementsByClassName","i","length","hideElement","introduceClientAnimation","introduceClient","finished","then","showElement","delay","statusElem","testing","index","str","statusText","textContent","targets","easing","duration","update","substr","complete","sendLogMessage","CLIENT_NODE","NODE_C","animation","logMessageFromLeaderToFollowers","leaderText1","leaderText2","ltxt1","ltxt2","changeMainText","setSVGText","targetId","text","ANIMATION_STATE_FINISHED","setState","console","error","onComplete","setTextWithAnimation"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram, { clientNodePositions } from './svg/MainDiagram';\nimport {Constants} from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\n\nconst ANIMATION_STATE_INITIAL = \"RAFT_READ_OPERATION_INITIAL\";\nconst ANIMATION_STATE_CLIENT_INTRODUCED = \"ANIMATION_STATE_CLIENT_INTRODUCED\";\nconst ANIMATION_STATE_PERFORMED_READ_ON_LEADER = \"ANIMATION_STATE_PERFORMED_READ_ON_LEADER\";\nconst ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS = \"ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS\";\n\nconst SET_VALUE1=\"V1\";\nconst SET_VALUE2=\"V2\";\nfunction setValueText(value) {\n\treturn \"SET \" + value;\n}\n\nexport class RaftReadOperationAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = ANIMATION_STATE_INITIAL;\n\t\tthis.state = {\n\t\t\tanimationFinished: false,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('main-text-sect');\n\t}\n\n\tpause(){\n\n\t}\n\tresume() {\n\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\t\tswitch(this.animationState) {\n\t\t\tcase ANIMATION_STATE_INITIAL: {\n\t\t\t\t//////////////////// initial setup ////////////////////\n\t\t\t\t// make Node C the Leader\n\t\t\t\tvar nodeC = document.getElementById('node-c-circle');\n\t\t\t\tnodeC.classList.add('leader-node');\n\n\t\t\t\t// hide all outer circles (TODO: revisit this approach)\n\t\t\t\tvar nodeOuterCircles = document.getElementsByClassName('node-outer-circle');\n\t\t\t\tfor (var i = 0; i < nodeOuterCircles.length; i++){\n\t\t\t\t\tHelperFunctions.hideElement(nodeOuterCircles[i]);\n\t\t\t\t}\n\n\t\t\t\t//////////////////////////////////////////////////////\n\t\t\t\tvar introduceClientAnimation = HelperFunctions.introduceClient('');\n\n\t\t\t\tintroduceClientAnimation.finished.then(() => {\t\t\t\t\t\n\t\t\t\t\tHelperFunctions.showElement(document.getElementById('client-message'));\n\t\t\t\t\tthis.animationState = ANIMATION_STATE_CLIENT_INTRODUCED;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: ANIMATION_STATE_CLIENT_INTRODUCED,\n\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_CLIENT_INTRODUCED: {\t\t\t\t\n\t\t\t\tthis.animationState = ANIMATION_STATE_PERFORMED_READ_ON_LEADER;\n\t\t\t\tconst statusElem = document.getElementById('client-message-status');\n\t\t\t\tconst testing = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'Performing read..'\n\t\t\t\t}\n\t\t\t\tconst statusText = document.getElementById('client-message-status-text2');\n\t\t\t\t\n\t\t\t\tdocument.getElementById('client-message-status-text1').textContent = 'Client: ';\n\t\t\t\tHelperFunctions.showElement(document.getElementById('client-message-bubble'));\n\t\t\t\tHelperFunctions.showElement(statusElem);\n\t\t\t\tanime({\n\t\t\t\t\ttargets: testing,\n\t\t\t\t\tindex: testing.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 750,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tstatusText.textContent = testing.str.substr(0, testing.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false)\n\t\t\t\t});\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 1000\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_PERFORMED_READ_ON_LEADER: {\n\t\t\t\t// 'Leader contacts followers to obtain a consensus on current value'\n\t\t\t\tHelperFunctions.hideElement(document.getElementById('client-message-status'));\n\t\t\t\tHelperFunctions.hideElement(document.getElementById('client-message-bubble'));\n\t\t\t\tvar animation = HelperFunctions.logMessageFromLeaderToFollowers(true);\n\t\t\t\tconst statusElem = document.getElementById('node-c-message-status');\n\t\t\t\tdocument.getElementById('node-c-message-status-text1').textContent = 'Leader: Contacting followers';\n\t\t\t\tdocument.getElementById('node-c-message-status-text2').textContent = 'to obtain consensus value.';\n\t\t\t\tHelperFunctions.showElement(document.getElementById('node-c-message-bubble'));\n\t\t\t\tHelperFunctions.showElement(statusElem);\n\t\t\t\tconst leaderText1 = {\n\t\t\t\t\tindex: 7,\n\t\t\t\t\tstr: 'Leader: Contacting followers'\n\t\t\t\t}\n\t\t\t\tconst leaderText2 = {\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tstr: 'to obtain consensus value.'\n\t\t\t\t}\n\t\t\t\tconst ltxt1 = document.getElementById('node-c-message-status-text1');\n\t\t\t\tconst ltxt2 = document.getElementById('node-c-message-status-text2')\n\t\t\t\tanime({\n\t\t\t\t\ttargets: leaderText1,\n\t\t\t\t\tindex: leaderText1.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 750,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tltxt1.textContent = leaderText1.str.substr(0, leaderText1.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\tanime({\n\t\t\t\t\t\t\ttargets: leaderText2,\n\t\t\t\t\t\t\tindex: leaderText2.str.length,\n\t\t\t\t\t\t\teasing: 'linear',\n\t\t\t\t\t\t\tduration: 750,\n\t\t\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\t\t\tltxt2.textContent = leaderText2.str.substr(0, leaderText2.index);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcomplete: () => {\n\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tanime({\n\t\t\t\t\ttargets: testing,\n\t\t\t\t\tindex: testing.str.length,\n\t\t\t\t\teasing: 'linear',\n\t\t\t\t\tduration: 750,\n\t\t\t\t\tupdate: function() {\n\t\t\t\t\t\tstatusText.textContent = testing.str.substr(0, testing.index);\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: () => HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false)\n\t\t\t\t});\n\t\t\t\tthis.animationState = ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS;\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 1000\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ANIMATION_STATE_LEADER_RECEIVED_MAJORITY_ON_VALUE_FROM_FOLLOWERS: {\n\t\t\t\tthis.changeMainText('Once majority is obtained. The leader returns value back to the client', () => {\n\t\t\t\t\tdocument.getElementById('node-c-message-status-text1').textContent = 'Leader: Majority obtained.';\n\t\t\t\t\tdocument.getElementById('node-c-message-status-text2').textContent = 'Returning value to client..';\n\t\t\t\t\tvar animation = HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\t\t\t\t\tanimation.finished.then(() => {\n\t\t\t\t\t\tHelperFunctions.setSVGText({targetId: 'client-node-main-text', text: SET_VALUE1, showElement: true });\n\n\t\t\t\t\t\tthis.animationState = Constants.ANIMATION_STATE_FINISHED;\n\t\t\t\t\t\tthis.setState({ animationFinished: true });\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 100\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t\t\treject('Unrecognized state: ' + this.animationState);\n\t\t\t}\n\t\t}\n\t}\n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default RaftReadOperationAnimation;\n"]},"metadata":{},"sourceType":"module"}