{"ast":null,"code":"import _classCallCheck from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/andrew/code/yb-architecture/animations/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrew/code/yb-architecture/animations/src/RaftWriteAnimation.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport { Constants } from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nvar SET_VALUE1 = \"5\";\nvar AnimationState = {\n  INITIAL: \"INITIAL\",\n  LEADER_ELECTION_NODE_TIMED_OUT: \"LEADER_ELECTION_NODE_TIMED_OUT\",\n  LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF: \"LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF\",\n  LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES: \"LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES\",\n  LOG_REPLICATION_START: \"LOG_REPLICATION_START\",\n  LOG_REPLICATION_INTRODUCE_CLIENT: \"LOG_REPLICATION_INTRODUCE_CLIENT\",\n  LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER: \"LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER\",\n  LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS: \"LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS\",\n  LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY: \"LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY\",\n  LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER: \"LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER\"\n};\n\nvar RaftWriteAnimation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RaftWriteAnimation, _Component);\n\n  function RaftWriteAnimation(props) {\n    var _this;\n\n    _classCallCheck(this, RaftWriteAnimation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RaftWriteAnimation).call(this, props));\n    _this.animationState = AnimationState.INITIAL;\n    _this.state = {\n      animationFinished: false\n    };\n    return _this;\n  }\n\n  _createClass(RaftWriteAnimation, [{\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"resume\",\n    value: function resume() {}\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.onNextInternal(resolve, reject);\n      });\n    }\n  }, {\n    key: \"onNextInternal\",\n    value: function onNextInternal(resolve, reject) {\n      var _this3 = this;\n\n      switch (this.animationState) {\n        case AnimationState.INITIAL:\n          {\n            this.changeMainText('Leader election starts ...'); // initiate a timeout\n\n            setTimeout(function () {\n              _this3.changeMainText('If there is no leader, a election timeout is triggered'); ////////////////// animate Node A and B ////////////////////////\n\n\n              var nodeAOuterCircle = document.getElementById('node-a-outer-circle');\n              nodeAOuterCircle.classList.add('animation-delay-3s');\n              nodeAOuterCircle.classList.add('animate-circle-stroke');\n              var nodeBOuterCircle = document.getElementById('node-b-outer-circle');\n              nodeBOuterCircle.classList.add('animation-delay-2s');\n              nodeBOuterCircle.classList.add('animate-circle-stroke'); ////////////////// animate Node C ////////////////////////\n              // get the specific node (i.e Node C) which would time out faster and eventually\n              // become the leader\n\n              var nodeCOuterCircle = document.getElementById('node-c-outer-circle');\n              nodeCOuterCircle.classList.add('animate-circle-stroke'); // need to wait for the animation on the faster node to end and then\n              // execute the next step\n\n              var onNodeCAnimationEnd = function onNodeCAnimationEnd() {\n                nodeAOuterCircle.classList.add('pause-animation');\n                nodeBOuterCircle.classList.add('pause-animation');\n                nodeCOuterCircle.style.display = 'none';\n                _this3.animationState = AnimationState.LEADER_ELECTION_NODE_TIMED_OUT;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              };\n\n              nodeCOuterCircle.addEventListener(\"webkitAnimationEnd\", onNodeCAnimationEnd, false);\n              nodeCOuterCircle.addEventListener(\"animationend\", onNodeCAnimationEnd, false);\n            }, Constants.DEFAULT_DELAY);\n            break;\n          }\n\n        case AnimationState.LEADER_ELECTION_NODE_TIMED_OUT:\n          {\n            var fasterTimeoutCircle = document.getElementById('node-c-outer-circle');\n            fasterTimeoutCircle.classList.add('leader-candidate-node');\n            var nodeCVoteText = document.getElementById('node-c-extra-text');\n            nodeCVoteText.classList.remove('visibility-hidden');\n            this.changeMainText('After election timeout the follower becomes a candidate. ' + 'It starts a new election term and votes for itself', function () {\n              _this3.animationState = AnimationState.LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 2000\n              });\n            });\n            break;\n          }\n\n        case AnimationState.LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF:\n          {\n            // send \"request vote\" to node B\n            var messageToB = document.getElementById('node-c-message-to-b');\n            var animation1 = HelperFunctions.messageFromC(Constants.NODE_B, {\n              onBegin: function onBegin(anim) {\n                messageToB.classList.add('vote-request-circle');\n              },\n              onChangeComplete: function onChangeComplete(anim) {\n                messageToB.classList.remove('vote-request-circle');\n                messageToB.classList.add('vote-ack-circle');\n              },\n              onComplete: function onComplete(anim) {\n                messageToB.classList.remove('vote-ack-circle');\n              },\n              alternate: true\n            }); // send \"request vote\" to node A\n\n            var messageToA = document.getElementById('node-c-message-to-a');\n            var animation2 = HelperFunctions.messageFromC(Constants.NODE_A, {\n              onBegin: function onBegin(anim) {\n                messageToA.classList.add('vote-request-circle');\n              },\n              onChangeComplete: function onChangeComplete(anim) {\n                messageToA.classList.remove('vote-request-circle');\n                messageToA.classList.add('vote-ack-circle');\n              },\n              onComplete: function onComplete(anim) {\n                messageToA.classList.remove('vote-ack-circle');\n              },\n              alternate: true\n            }); // wait for both animations to finish before proceeding\n\n            Promise.all([animation1.finished, animation2.finished]).then(function () {\n              _this3.animationState = AnimationState.LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 1000\n              });\n            });\n            break;\n          }\n\n        case AnimationState.LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES:\n          {\n            this.changeMainText('Once a candidate has majority of votes it becomes the leader'); // show that follower nodes have voted for the leader (Node C)\n\n            var nodeAVoteText = document.getElementById('node-a-extra-text');\n            nodeAVoteText.classList.remove('visibility-hidden');\n            var nodeBVoteText = document.getElementById('node-b-extra-text');\n            nodeBVoteText.classList.remove('visibility-hidden');\n            var nodeCVoteText = document.getElementById('node-c-extra-text');\n            nodeCVoteText.textContent = 'Leader Node';\n            var nodeCOuterCircle = document.getElementById('node-c-outer-circle');\n            nodeCOuterCircle.classList.remove('leader-candidate-node');\n            nodeCOuterCircle.classList.add('leader-node'); // hide node A and B's outer circles\n\n            var nodeAOuterCircle = document.getElementById('node-a-outer-circle');\n            HelperFunctions.hideElement(nodeAOuterCircle);\n            var nodeBOuterCircle = document.getElementById('node-b-outer-circle');\n            HelperFunctions.hideElement(nodeBOuterCircle);\n            this.animationState = AnimationState.LOG_REPLICATION_START;\n            resolve({\n              animationState: this.animationState,\n              delay: 2000\n            });\n            break;\n          }\n\n        case AnimationState.LOG_REPLICATION_START:\n          {\n            var voteTexts = document.getElementsByClassName('node-extra-text');\n\n            for (var i = 0; i < voteTexts.length; i++) {\n              HelperFunctions.hideElement(voteTexts[i]);\n            }\n\n            this.changeMainText('Log replication ...');\n            this.animationState = AnimationState.LOG_REPLICATION_INTRODUCE_CLIENT;\n            resolve({\n              animationState: this.animationState,\n              delay: 2000\n            });\n            break;\n          }\n\n        case AnimationState.LOG_REPLICATION_INTRODUCE_CLIENT:\n          {\n            this.changeMainText('Clients always communicate with the leader.');\n            var introClientAnimation = HelperFunctions.introduceClient();\n            introClientAnimation.finished.then(function () {\n              var messageToCAnimation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false, HelperFunctions.getSetValueText(SET_VALUE1));\n              messageToCAnimation.finished.then(function () {\n                _this3.animationState = AnimationState.LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 1000\n                });\n              });\n            });\n            break;\n          }\n\n        case AnimationState.LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER:\n          {\n            this.changeMainText(\"The log entry is currently uncommitted, so it won't update the node's value. To commit the entry the node first replicates it to the follower nodes\", function () {\n              // send log messages to follower nodes\n              var animations = HelperFunctions.logMessageFromLeaderToFollowers(true, HelperFunctions.getSetValueText(SET_VALUE1));\n              var animationPromises = HelperFunctions.getFinishPromises(animations); // wait for both animations to finish before proceeding\n\n              Promise.all(animationPromises).then(function () {\n                _this3.animationState = AnimationState.LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              });\n            });\n            break;\n          }\n\n        case AnimationState.LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS:\n          {\n            this.changeMainText(\"Once the leader receives acks from majority of follower nodes, it commits the value and sets it state to '5'\", function () {\n              // since leader has received acks from both followers, mark entry as committed\n              HelperFunctions.setSVGText({\n                targetId: 'node-c-extra-text',\n                addCSSClass: \"set-text-committed\"\n              });\n              HelperFunctions.setSVGText({\n                targetId: 'node-c-main-text',\n                text: \"5\",\n                showElement: true\n              });\n              _this3.animationState = AnimationState.LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY;\n              resolve({\n                animationState: _this3.animationState,\n                delay: 1000\n              });\n            });\n            break;\n          }\n\n        case AnimationState.LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY:\n          {\n            this.changeMainText(\"The leader then notifies followers and the client that entry is committed\", function () {\n              // notify followers that leader has committed the entries\n              var animations = HelperFunctions.logMessageFromLeaderToFollowers(false, HelperFunctions.getSetValueText(SET_VALUE1), true);\n              var animationPromises = HelperFunctions.getFinishPromises(animations); // and notify client as well\n\n              HelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE); //// follower message animation on finish\n\n              Promise.all(animationPromises).then(function () {\n                _this3.animationState = AnimationState.LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER;\n                resolve({\n                  animationState: _this3.animationState,\n                  delay: 100\n                });\n              });\n            });\n            break;\n          }\n\n        case AnimationState.LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER:\n          {\n            // commit entries for follower nodes\n            HelperFunctions.setSVGText({\n              targetId: 'node-a-main-text',\n              text: SET_VALUE1,\n              showElement: true\n            });\n            HelperFunctions.setSVGText({\n              targetId: 'node-b-main-text',\n              text: SET_VALUE1,\n              showElement: true\n            });\n            this.changeMainText(\"The cluster has now come to consensus about the system state\");\n            this.animationState = Constants.ANIMATION_STATE_FINISHED;\n            this.setState({\n              animationFinished: true\n            });\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        case Constants.ANIMATION_STATE_FINISHED:\n          {\n            resolve({\n              animationState: this.animationState,\n              delay: 100\n            });\n            break;\n          }\n\n        default:\n          console.error('Unrecognized state: ' + this.animationState);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mainTextSect = document.getElementById('main-text-sect');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main-diagram\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(MainDiagram, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"main-text-sect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"changeMainText\",\n    value: function changeMainText(text, onComplete) {\n      HelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n    }\n  }]);\n\n  return RaftWriteAnimation;\n}(Component);\n\nexport default RaftWriteAnimation;","map":{"version":3,"sources":["/Users/andrew/code/yb-architecture/animations/src/RaftWriteAnimation.js"],"names":["React","Component","anime","MainDiagram","Constants","HelperFunctions","require","SET_VALUE1","AnimationState","INITIAL","LEADER_ELECTION_NODE_TIMED_OUT","LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF","LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES","LOG_REPLICATION_START","LOG_REPLICATION_INTRODUCE_CLIENT","LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER","LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS","LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY","LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER","RaftWriteAnimation","props","animationState","state","animationFinished","Promise","resolve","reject","onNextInternal","changeMainText","setTimeout","nodeAOuterCircle","document","getElementById","classList","add","nodeBOuterCircle","nodeCOuterCircle","onNodeCAnimationEnd","style","display","delay","addEventListener","DEFAULT_DELAY","fasterTimeoutCircle","nodeCVoteText","remove","messageToB","animation1","messageFromC","NODE_B","onBegin","anim","onChangeComplete","onComplete","alternate","messageToA","animation2","NODE_A","all","finished","then","nodeAVoteText","nodeBVoteText","textContent","hideElement","voteTexts","getElementsByClassName","i","length","introClientAnimation","introduceClient","messageToCAnimation","sendLogMessage","CLIENT_NODE","NODE_C","getSetValueText","animations","logMessageFromLeaderToFollowers","animationPromises","getFinishPromises","setSVGText","targetId","addCSSClass","text","showElement","ANIMATION_STATE_FINISHED","setState","console","error","mainTextSect","setTextWithAnimation"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport anime from 'animejs/lib/anime.es.js';\nimport MainDiagram from './svg/MainDiagram';\nimport {Constants} from './constants';\n\nvar HelperFunctions = require('./HelperFunctions');\n\nconst SET_VALUE1 = \"5\";\nvar AnimationState = {\n\tINITIAL: \"INITIAL\",\n\tLEADER_ELECTION_NODE_TIMED_OUT: \"LEADER_ELECTION_NODE_TIMED_OUT\",\n\tLEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF: \"LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF\",\n\tLEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES: \"LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES\",\n\tLOG_REPLICATION_START: \"LOG_REPLICATION_START\",\n\tLOG_REPLICATION_INTRODUCE_CLIENT: \"LOG_REPLICATION_INTRODUCE_CLIENT\",\n\tLOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER: \"LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER\",\n\tLOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS: \"LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS\",\n\tLOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY: \"LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY\",\n\tLOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER: \"LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER\",\n};\n\n\nclass RaftWriteAnimation extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.animationState = AnimationState.INITIAL;\n\t\tthis.state = {\n\t\t\tanimationFinished: false,\n\t\t}\n\t}\n\n\tpause() {\n\t}\n\tresume() {\n\t}\n\n\tonNext() {\n\t\treturn new Promise((resolve,reject) => {\n\t\t\tthis.onNextInternal(resolve,reject);\n\t\t});\n\t}\n\n\tonNextInternal(resolve,reject) {\n\t\tswitch(this.animationState) {\n\t\t\tcase AnimationState.INITIAL: {\n\t\t\t\tthis.changeMainText('Leader election starts ...');\n\n\t\t\t\t// initiate a timeout\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.changeMainText('If there is no leader, a election timeout is triggered');\n\n\t\t\t\t\t////////////////// animate Node A and B ////////////////////////\n\t\t\t\t\tvar nodeAOuterCircle = document.getElementById('node-a-outer-circle');\n\t\t\t\t\tnodeAOuterCircle.classList.add('animation-delay-3s');\n\t\t\t\t\tnodeAOuterCircle.classList.add('animate-circle-stroke');\n\n\t\t\t\t\tvar nodeBOuterCircle = document.getElementById('node-b-outer-circle');\n\t\t\t\t\tnodeBOuterCircle.classList.add('animation-delay-2s');\n\t\t\t\t\tnodeBOuterCircle.classList.add('animate-circle-stroke');\n\n\t\t\t\t\t////////////////// animate Node C ////////////////////////\n\t\t\t\t\t// get the specific node (i.e Node C) which would time out faster and eventually\n\t\t\t\t\t// become the leader\n\t\t\t\t\tvar nodeCOuterCircle = document.getElementById('node-c-outer-circle');\n\t\t\t\t\tnodeCOuterCircle.classList.add('animate-circle-stroke');\n\n\t\t\t\t\t// need to wait for the animation on the faster node to end and then\n\t\t\t\t\t// execute the next step\n\t\t\t\t\tvar onNodeCAnimationEnd = () => {\n\t\t\t\t\t\tnodeAOuterCircle.classList.add('pause-animation');\n\t\t\t\t\t\tnodeBOuterCircle.classList.add('pause-animation');\n\t\t\t\t\t\tnodeCOuterCircle.style.display = 'none';\n\t\t\t\t\t\tthis.animationState = AnimationState.LEADER_ELECTION_NODE_TIMED_OUT;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tnodeCOuterCircle.addEventListener(\"webkitAnimationEnd\", onNodeCAnimationEnd,false);\n\t\t\t\t\tnodeCOuterCircle.addEventListener(\"animationend\", onNodeCAnimationEnd,false);\n\n\t\t\t\t}, Constants.DEFAULT_DELAY);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LEADER_ELECTION_NODE_TIMED_OUT: {\n\t\t\t\tvar fasterTimeoutCircle = document.getElementById('node-c-outer-circle');\n\t\t\t\tfasterTimeoutCircle.classList.add('leader-candidate-node');\n\n\t\t\t\tvar nodeCVoteText = document.getElementById('node-c-extra-text');\n\t\t\t\tnodeCVoteText.classList.remove('visibility-hidden');\n\n\t\t\t\tthis.changeMainText('After election timeout the follower becomes a candidate. '\n\t\t\t\t+ 'It starts a new election term and votes for itself', () => {\n\t\t\t\t\tthis.animationState = AnimationState.LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 2000,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LEADER_ELECTION_LEADER_HAS_VOTED_FOR_ITSELF: {\n\t\t\t\t// send \"request vote\" to node B\n\t\t\t\tvar messageToB = document.getElementById('node-c-message-to-b');\n\t\t\t\tvar animation1 = HelperFunctions.messageFromC(Constants.NODE_B, {\n\t\t\t\t\tonBegin: (anim) => {\n\t\t\t\t\t\tmessageToB.classList.add('vote-request-circle')\n\t\t\t\t\t},\n\t\t\t\t\tonChangeComplete: (anim) => {\n\t\t\t\t\t\tmessageToB.classList.remove('vote-request-circle');\n\t\t\t\t\t\tmessageToB.classList.add('vote-ack-circle');\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: (anim) => {\n\t\t\t\t\t\tmessageToB.classList.remove('vote-ack-circle');\n\t\t\t\t\t},\n\t\t\t\t\talternate: true,\n\t\t\t\t});\n\n\t\t\t\t// send \"request vote\" to node A\n\t\t\t\tvar messageToA = document.getElementById('node-c-message-to-a');\n\t\t\t\tvar animation2 = HelperFunctions.messageFromC(Constants.NODE_A, {\n\t\t\t\t\tonBegin: (anim) => {\n\t\t\t\t\t\tmessageToA.classList.add('vote-request-circle')\n\t\t\t\t\t},\n\t\t\t\t\tonChangeComplete: (anim) => {\n\t\t\t\t\t\tmessageToA.classList.remove('vote-request-circle');\n\t\t\t\t\t\tmessageToA.classList.add('vote-ack-circle');\n\t\t\t\t\t},\n\t\t\t\t\tonComplete: (anim) => {\n\t\t\t\t\t\tmessageToA.classList.remove('vote-ack-circle');\n\t\t\t\t\t},\n\t\t\t\t\talternate: true,\n\t\t\t\t})\n\n\t\t\t\t// wait for both animations to finish before proceeding\n\t\t\t\tPromise.all([animation1.finished, animation2.finished]).then(() => {\n\t\t\t\t\tthis.animationState = AnimationState.LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 1000,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LEADER_ELECTION_LEADER_RECEIVED_VOTES_FROM_OTHER_NODES: {\n\t\t\t\tthis.changeMainText('Once a candidate has majority of votes it becomes the leader');\n\n\t\t\t\t// show that follower nodes have voted for the leader (Node C)\n\t\t\t\tvar nodeAVoteText = document.getElementById('node-a-extra-text');\n\t\t\t\tnodeAVoteText.classList.remove('visibility-hidden');\n\t\t\t\tvar nodeBVoteText = document.getElementById('node-b-extra-text');\n\t\t\t\tnodeBVoteText.classList.remove('visibility-hidden');\n\n\t\t\t\tvar nodeCVoteText = document.getElementById('node-c-extra-text');\n\t\t\t\tnodeCVoteText.textContent = 'Leader Node';\n\n\t\t\t\tvar nodeCOuterCircle = document.getElementById('node-c-outer-circle');\n\t\t\t\tnodeCOuterCircle.classList.remove('leader-candidate-node');\n\t\t\t\tnodeCOuterCircle.classList.add('leader-node');\n\n\t\t\t\t// hide node A and B's outer circles\n\t\t\t\tvar nodeAOuterCircle = document.getElementById('node-a-outer-circle');\n\t\t\t\tHelperFunctions.hideElement(nodeAOuterCircle);\n\n\t\t\t\tvar nodeBOuterCircle = document.getElementById('node-b-outer-circle');\n\t\t\t\tHelperFunctions.hideElement(nodeBOuterCircle);\n\n\t\t\t\tthis.animationState = AnimationState.LOG_REPLICATION_START;\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 2000,\n\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LOG_REPLICATION_START: {\n\t\t\t\tvar voteTexts = document.getElementsByClassName('node-extra-text');\n\t\t\t\tfor (var i = 0; i < voteTexts.length; i++){\n\t\t\t\t\tHelperFunctions.hideElement(voteTexts[i]);\n\t\t\t\t}\n\t\t\t\tthis.changeMainText('Log replication ...');\n\n\t\t\t\tthis.animationState = AnimationState.LOG_REPLICATION_INTRODUCE_CLIENT;\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 2000,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LOG_REPLICATION_INTRODUCE_CLIENT: {\n\t\t\t\tthis.changeMainText('Clients always communicate with the leader.');\n\n\t\t\t\tvar introClientAnimation = HelperFunctions.introduceClient();\n\n\t\t\t\tintroClientAnimation.finished.then(() => {\n\t\t\t\t\tvar messageToCAnimation = HelperFunctions.sendLogMessage(Constants.CLIENT_NODE, Constants.NODE_C, false, HelperFunctions.getSetValueText(SET_VALUE1));\n\t\t\t\t\tmessageToCAnimation.finished.then(() => {\n\t\t\t\t\t\tthis.animationState = AnimationState.LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 1000,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LOG_REPLICATION_MESSAGE_RECEIVED_BY_LEADER: {\n\t\t\t\tthis.changeMainText(\"The log entry is currently uncommitted, so it won't update the node's value. To commit the entry the node first replicates it to the follower nodes\", () => {\n\t\t\t\t\t// send log messages to follower nodes\n\t\t\t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(true, HelperFunctions.getSetValueText(SET_VALUE1));\n\t\t\t\t\tvar animationPromises = HelperFunctions.getFinishPromises(animations);\n\n\t\t\t\t\t// wait for both animations to finish before proceeding\n\t\t\t\t\tPromise.all(animationPromises).then(() => {\n\t\t\t\t\t\tthis.animationState = AnimationState.LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LOG_REPLICATION_LEADER_RECEIVED_ALL_LOG_ACKS: {\n\t\t\t\tthis.changeMainText(\"Once the leader receives acks from majority of follower nodes, it commits the value and sets it state to '5'\", () => {\n\t\t\t\t\t// since leader has received acks from both followers, mark entry as committed\n\t\t\t\t\tHelperFunctions.setSVGText({\n\t\t\t\t\t\ttargetId: 'node-c-extra-text',\n\t\t\t\t\t\taddCSSClass: \"set-text-committed\"});\n\t\t\t\t\tHelperFunctions.setSVGText({\n\t\t\t\t\t\ttargetId: 'node-c-main-text',\n\t\t\t\t\t\ttext: \"5\",\n\t\t\t\t\t\tshowElement: true,});\n\n\t\t\t\t\tthis.animationState = AnimationState.LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY;\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\tdelay: 1000,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LOG_REPLICATION_LEADER_HAS_COMMITTED_ENTRY: {\n\t\t\t\tthis.changeMainText(\"The leader then notifies followers and the client that entry is committed\", () => {\n\t\t\t\t\t// notify followers that leader has committed the entries\n\t\t\t\t\tvar animations = HelperFunctions.logMessageFromLeaderToFollowers(false,HelperFunctions.getSetValueText(SET_VALUE1), true);\n\t\t\t\t\tvar animationPromises = HelperFunctions.getFinishPromises(animations);\n\n\t\t\t\t\t// and notify client as well\n\t\t\t\t\tHelperFunctions.sendLogMessage(Constants.NODE_C, Constants.CLIENT_NODE);\n\n\t\t\t\t\t//// follower message animation on finish\n\t\t\t\t\tPromise.all(animationPromises).then(() => {\n\t\t\t\t\t\tthis.animationState = AnimationState.LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER;\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\t\t\tdelay: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase AnimationState.LOG_REPLICATION_FOLLOWERS_RECEIVED_COMMIT_MESSAGE_FROM_LEADER: {\n\t\t\t\t// commit entries for follower nodes\n\t\t\t\tHelperFunctions.setSVGText({\n\t\t\t\t\t\ttargetId: 'node-a-main-text',\n\t\t\t\t\t\ttext: SET_VALUE1,\n\t\t\t\t\t\tshowElement: true,\n\t\t\t\t});\n\n\t\t\t\tHelperFunctions.setSVGText({\n\t\t\t\t\ttargetId: 'node-b-main-text',\n\t\t\t\t\ttext: SET_VALUE1,\n\t\t\t\t\tshowElement: true,\n\t\t\t\t});\n\n\t\t\t\tthis.changeMainText(\"The cluster has now come to consensus about the system state\");\n\t\t\t\tthis.animationState = Constants.ANIMATION_STATE_FINISHED;\n\t\t\t\tthis.setState({ animationFinished: true });\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Constants.ANIMATION_STATE_FINISHED: {\n\t\t\t\tresolve({\n\t\t\t\t\tanimationState: this.animationState,\n\t\t\t\t\tdelay: 100,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconsole.error('Unrecognized state: ' + this.animationState);\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.mainTextSect = document.getElementById('main-text-sect');\n\t}\n\n  render() {\n    return (\n\t    <div>\n\t\t\t\t<div id=\"main-diagram\">\n\t\t\t\t\t<MainDiagram/>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"main-text-sect\">\n\t\t\t\t</div>\n\t    </div>\n\t  );\n  }\n\n\tchangeMainText(text, onComplete) {\n\t\tHelperFunctions.setTextWithAnimation(this.mainTextSect, text, onComplete);\n\t}\n}\n\nexport default RaftWriteAnimation;\n"]},"metadata":{},"sourceType":"module"}